//перем ТЗ_РазобраноПоПоставщикам;
перем ИтогКоличествоРаспределено;
перем ИтогСуммаРаспределено;

Процедура ОсновныеДействияФормыДействие(Кнопка)
	
	ЕстьОшибка = Истина;
	ЕстьОшибка1 = ложь;
	ЕстьОшибка2 = ложь;
	
	ЭтоПроценка = Элементыформы.ФлВключитьПроценкуПоAPI.Значение;
	
	ЗаказПокупателя = Элементыформы.ЗаказПокупателя.Значение;
	
	Если ТабЗаказы.Количество() = 0 Тогда
		ЕстьОшибка1 = истина;
		
		Если Элементыформы.ВывбКонтрагент.Значение = справочники.Контрагенты.ПустаяСсылка() Тогда
			//сообщить ("Не указан контрагент");
			ЕстьОшибка2 = истина;
		Конецесли;	
		
		Если не значениезаполнено (Элементыформы.ВывФайл.Значение) Тогда
			//сообщить ("Не указан файл загрузки");
			ЕстьОшибка2 = истина;
		Конецесли;	
	КонецЕсли;
	
	Если ЕстьОшибка1 И ЕстьОшибка2 Тогда
		Сообщить("Не указан заказ покупателя или контрагент/файл заказа");
	КонецЕсли;
	
	Если НЕ ЕстьОшибка1 ИЛИ НЕ ЕстьОшибка2 Тогда
		
		ТЗ_ДанныеПроценки.Очистить();
		ТЗ_СозданныеПроценкиПоПоставщикам.Очистить();	
		ТЗ_РазобраноПоПоставщикам.Очистить();	
		ИтогКоличествоРаспределено = 0;
		ИтогСуммаРаспределено= 0;
		Попытка
			Элементыформы.ТЗ_РазобраноПоПоставщикам.Колонки.Количество.ТекстПодвала = ИтогКоличествоРаспределено;
			Элементыформы.ТЗ_РазобраноПоПоставщикам.Колонки.Цена.ТекстПодвала = ИтогСуммаРаспределено;
		Исключение
		КонецПопытки;
		
		Если НЕ Элементыформы.ФлВключитьПроценкуПоAPI.Значение Тогда     													//Создание заказа
			
			Если ЕстьОшибка2 Тогда 
				Сообщить("Не указан контрагент и файл загрузки!") 
			Иначе	
				
				ФайлВ = новый файл(Элементыформы.ВывФайл.Значение);
				Файл = Новый ДвоичныеДанные(Элементыформы.ВывФайл.Значение);
				Адрес = ПоместитьВоВременноеХранилище(Файл);
				
				Если НЕ ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка() Тогда //Из файла в выбранный заказ
					
					РезОбработки = ОП_ЗаказыПокупателей.ЗагрузитьЗаказПокупателя(ЗаказПокупателя.Контрагент, Адрес, ФайлВ.Расширение, ЗаказПокупателя);
					Форма = ЗаказПокупателя.ПолучитьФорму();
					Форма.Открыть();
					
				Иначе																	//Из файла в новый заказ																		
					
					РезОбработки = ОП_ЗаказыПокупателей.ЗагрузитьЗаказПокупателя(Элементыформы.ВывбКонтрагент.Значение, Адрес, ФайлВ.Расширение);
					Если РезОбработки <> Неопределено тогда
						ДокЗК = РезОбработки.ЗаказПокупателя;
						Форм =  ДокЗК.получитьФорму();
						Форм.открыть();
						
						Элементыформы.ЗаказПокупателя.Значение = РезОбработки.ЗаказПокупателя;
					Конецесли;	
					
				КонецЕсли;
			КонецЕсли;
			
		Иначе																												//Проценка
		
			ВалютаРуб = Справочники.Валюты.НайтиПоКоду("643");
			ВалютаUSD = Справочники.Валюты.НайтиПоКоду("840");

			//Если НЕ ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка() Тогда //Из заказа
			Если НЕ ТабЗаказы.Количество() = 0 Тогда
				ТЗ_.Очистить();
				Для каждого СтрЗаказ Из ТабЗаказы Цикл
					
					//	ТЗ = СтрЗаказ.ЗаказПокупателя.Товары.Выгрузить();
					ТЗ = ПолучитьДанныеДляПроценки(СтрЗаказ.ЗаказПокупателя);
					
					//Если СтрЗаказ.ЗаказПокупателя.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("643") Тогда
					//	Курс = ПолучитьКурсРубля(СтрЗаказ.ЗаказПокупателя.Дата);
					//Иначе	
						Курс = ПолучитьКурсВалюты(СтрЗаказ.ЗаказПокупателя.ВалютаДокумента, СтрЗаказ.ЗаказПокупателя.Дата);
						КурсВалютыUSD	= ПолучитьКурсВалюты(ВалютаUSD, СтрЗаказ.ЗаказПокупателя.Дата);
					//КонецЕсли;
				
					Для Каждого СтрТ Из ТЗ Цикл
						НстрТЧ = ТЗ_.Добавить();
						НстрТЧ.ЗаказПокупателя			= СтрЗаказ.ЗаказПокупателя;
						НстрТЧ.Бренд					= СтрТ.Номенклатура.ИНФ_Бренд.Наименование;
						НстрТЧ.Номер					= СтрТ.Номенклатура.Артикул;
						НстрТЧ.Количество				= СтрТ.Количество;
						Если СтрТ.Цена<>СтрТ.ЦенаЗаказа Тогда
							НстрТЧ.Цена					= СтрТ.ЦенаЗаказа; 
							//НстрТЧ.Цена					= Окр(СтрТ.ЦенаЗаказа + 0.005, 2, 0); 
							//Сообщить("Несоответствие цен УЗ и ЗК: " + СтрТ.Номенклатура);
						Иначе
							//НстрТЧ.Цена					= Окр(СтрТ.Цена + 0.005, 2, 0); 
							НстрТЧ.Цена					= СтрТ.Цена; 
						КонецЕсли;
						
						//НстрТЧ.Цена_2					= НстрТЧ.Цена*Курс;   //неверный расчет
						НстрТЧ.Цена_2					= Окр(?(СтрЗаказ.ЗаказПокупателя.ВалютаДокумента = ВалютаРуб, НстрТЧ.Цена/Курс*КурсВалютыUSD, НстрТЧ.Цена*Курс) + 0.005, 2, 0);
												
						НстрТЧ.ВалютаДокумента			= СтрЗаказ.ЗаказПокупателя.ВалютаДокумента;
						НстрТЧ.БрендСсылка				= СтрТ.Номенклатура.ИНФ_Бренд;
						НстрТЧ.Сумма_1					= НстрТЧ.Количество * НстрТЧ.Цена;
						НстрТЧ.Сумма					= НстрТЧ.Количество * НстрТЧ.Цена_2;
						НстрТЧ.ИНФ_ПроцентНаценкиМакс	= СтрТ.ИНФ_ПроцентНаценкиМакс;
						//НстрТЧ.ИдСтроки 				= Новый УникальныйИдентификатор();
						//НстрТЧ.ИДСтрокиПроценка		= СтрТ.ИДСтрокиПроценка;
						НстрТЧ.ИдСтроки 				= СтрТ.ИдСтроки_2;
						НстрТЧ.ИДСтрокиПроценка			= СтрТ.Номенклатура.ИНФ_Бренд.Наименование +"_"+ СтрТ.Номенклатура.Артикул;
					КонецЦикла;
				КонецЦикла;
				
				//ТЗ_.Сортировать("Номер возр, ИДСтрокиПроценка убыв, Цена убыв");
				//ИДСтрокиПроценка = "";
				//Номер	= "";
				//Для Каждого СтрТ Из ТЗ_ Цикл
				//	Если СтрТ.Номер = Номер Тогда
				//		СтрТ.ИДСтрокиПроценка = ИДСтрокиПроценка;
				//	Иначе
				//		СтрТ.ИДСтрокиПроценка = Новый УникальныйИдентификатор();
				//	КонецЕсли;
				//	Номер = СтрТ.Номер;
				//	ИДСтрокиПроценка = СтрТ.ИДСтрокиПроценка;
				//КонецЦикла;
				
				ТЗ_.Сортировать("Номер возр, Цена Возр");
				
			Иначе 																	//Из файла
				
				Сообщить("Не указан заказ покупателя!");
				
				//	
				//	ФайлВ = новый файл(Элементыформы.ВывФайл.Значение);
				//	Файл = Новый ДвоичныеДанные(Элементыформы.ВывФайл.Значение);
				//	Адрес = ПоместитьВоВременноеХранилище(Файл);
				//	
				//	ФайлЕксель = Новый Файл(Элементыформы.ВывФайл.Значение);	
				//	ТабДок = Новый ТабличныйДокумент;
				//	
				//	Если  ВРЕГ (ФайлЕксель.Расширение)="XLSX" тогда
				//		ТабДок.Прочитать(Элементыформы.ВывФайл.Значение, СпособЧтенияЗначенийТабличногоДокумента.Значение);
				//	иначе
				//		ТабДок.Прочитать(Элементыформы.ВывФайл.Значение, СпособЧтенияЗначенийТабличногоДокумента.Текст);
				//	конецесли;	
				//	
				//	ТЗ = инф.ТабличныйДокументВТаблицуЗначений_вариант2(ТабДок,Элементыформы.ВывбКонтрагент.Значение.ПозицияПерваяСтрокаСДанными);
				//	ТЗ_.Очистить();
				//	Для Каждого СтрТ Из ТЗ Цикл
				//		НстрТЧ = ТЗ_.Добавить();
				//		НстрТЧ.Бренд		= СтрТ[Элементыформы.ВывбКонтрагент.Значение.ПозицияБренд-1];
				//		НстрТЧ.Номер		= СтрТ[Элементыформы.ВывбКонтрагент.Значение.ПозицияНомер-1];
				//		НстрТЧ.Количество	= СтрТ[Элементыформы.ВывбКонтрагент.Значение.ПозицияКоличество-1];
				//		НстрТЧ.Цена			= СтрТ[Элементыформы.ВывбКонтрагент.Значение.ПозицияЦена-1];
				//		НстрТЧ.ИдСтроки 	= Новый УникальныйИдентификатор();
				//		НстрТЧ.БрендСсылка	= справочники.ИНФ_Бренд.НайтиПоНаименованию(НстрТЧ.Бренд);
				//		НстрТЧ.Сумма		= НстрТЧ.Количество * НстрТЧ.Цена;
				//	КонецЦикла;
				//	
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	КоманднаяПанель4НайтиПроценки();
	
	ДобавленНовыйПрайс = ПроверитьСоставПрайсов();
	ДобавленаНоваяНоменклатура = ПроверитьСоставНоменклатуры();
	НеВсеЗаказыВПроценках = ПроверитьСоставЗаказов();
	//ДобавленаНоваяНоменклатура = Ложь;
	
	Если ТЗ_СозданныеПроценкиПоПоставщикам.Количество() > 0 И НЕ ДобавленНовыйПрайс И НЕ ДобавленаНоваяНоменклатура И НЕ НеВсеЗаказыВПроценках Тогда
		тСтатусПроценкиНажатие();
	Иначе
		ПроценитьНажатие("Нет");
	КонецЕсли; 
	
	ОтборЗагруженых = Новый Структура();
	ОтборЗагруженых.Вставить("Загружено",Истина);
	СтрокиЗагруженых = ТЗ_СозданныеПроценкиПоПоставщикам.НайтиСтроки(ОтборЗагруженых);
	
	Если ТЗ_СозданныеПроценкиПоПоставщикам.Количество() = СтрокиЗагруженых.Количество() И НЕ ТЗ_РазобраноПоПоставщикам .Количество() = 0 Тогда
		Элементыформы.Панель1.ТекущаяСтраница = Элементыформы.Панель1.Страницы.Страница1;
	Иначе
		Элементыформы.Панель1.ТекущаяСтраница = Элементыформы.Панель1.Страницы.Страница3;	
	КонецЕсли;
	
	УправлениеДоступностью();
	
КонецПроцедуры

Процедура ВывФайлНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=ложь;
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Выберите файл";
	Диалог.ПолноеИмяФайла = ""; 
	Фильтр = "(*.xlsx)|*.xlsx|";  
	Диалог.Фильтр = Фильтр; 
	Диалог.МножественныйВыбор = Ложь;
	//Диалог.Каталог = "F:\";
	Если Диалог.Выбрать() Тогда
		Элементыформы.ВывФайл.Значение = Диалог.ПолноеИмяФайла;
	КонецЕсли;
КонецПроцедуры


Процедура ПробоватьЗаполнитьЛокальногоПоставщика()
	
	запрос = новый запрос();
	запрос.Текст = 
	"ВЫБРАТЬ
	|	Инф_Поставщик.Ссылка КАК Прайс,
	|	Инф_Поставщик.Код КАК Код
	|ИЗ
	|	Справочник.Инф_Поставщик КАК Инф_Поставщик
	|ГДЕ
	|	Инф_Поставщик.ПометкаУдаления = ЛОЖЬ";
	Ку  = запрос.Выполнить().Выгрузить();
	ТЗ_Настройка_ПрайсыПоставщиковЛокальные.Очистить();
	
	для каждого стрКу из Ку цикл
		НСтрТЧ = ТЗ_Настройка_ПрайсыПоставщиковЛокальные.Добавить();
		ЗаполнитьЗначенияСвойств(НСтрТЧ,стрКу);
	конеццикла;
	
	ТЗ_Настройка_ПрайсыПоставщиковЛокальные.Сортировать("Прайс");
	
	Если ЗначениеЗаполнено(ВывбКонтрагент) тогда
		РасставитьИспользуемыеЛокальныеПрайсы();
	конецесли;	
	
конецпроцедуры

Процедура РасставитьИспользуемыеЛокальныеПрайсы()
	для каждого СтрП из ТЗ_Настройка_ПрайсыПоставщиковЛокальные цикл
		СтрП .Выбран = Ложь;
	конеццикла;
	
	
	для каждого СтрП из ВывбКонтрагент.ИНФ_Прайсы цикл
		
		для каждого СтрПоставщик из СтрП.ВыгрузкаПрайса.СписокПоставщикоНаВыгрузку цикл
			
			HtpG = ТЗ_Настройка_ПрайсыПоставщиковЛокальные.Найти(СтрПоставщик.ИНФ_Поставщик,"Прайс");
			Если HtpG<> Неопределено тогда
				HtpG.Выбран = истина;
			конецесли;	
		конеццикла;			
	конеццикла;	
	
	
конецпроцедуры


Процедура ВывбКонтрагентПриИзменении(Элемент)
	РасставитьИспользуемыеЛокальныеПрайсы();
КонецПроцедуры


Процедура ПробоватьЗаполнитьАпиПоставщика()
	
	запрос = новый запрос();
	запрос.Текст = 
	"ВЫБРАТЬ
	|	ИНФ_API_Поставщики_suppliersПрайсы.Ссылка КАК Поставщик,
	|	ИНФ_API_Поставщики_suppliersПрайсы.Активный КАК Выбран,
	|	ИНФ_API_Поставщики_suppliersПрайсы.code КАК ПрайсПоставщика
	|ИЗ
	|	Справочник.ИНФ_API_Поставщики_suppliers.Прайсы КАК ИНФ_API_Поставщики_suppliersПрайсы
	|ГДЕ
	|	ИНФ_API_Поставщики_suppliersПрайсы.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И ИНФ_API_Поставщики_suppliersПрайсы.Активный = ИСТИНА
	|	И ИНФ_API_Поставщики_suppliersПрайсы.Ссылка.Недействителен = ЛОЖЬ";
	
	РезультатЗапроса = запрос.Выполнить().Выгрузить();
	ТЗ_Настройка_ПрайсыПоставщиков.Очистить();
	
	Для каждого стрКу из РезультатЗапроса цикл
		НСтрТЧ = ТЗ_Настройка_ПрайсыПоставщиков.Добавить();
		ЗаполнитьЗначенияСвойств(НСтрТЧ,стрКу);
	КонецЦикла;
	
	ТЗ_Настройка_ПрайсыПоставщиков.Сортировать("Поставщик Возр, ПрайсПоставщика Возр");
	
	ПроставитьФлагиПрайсов();
	
	//Если Значениезаполнено(ИНФ_API_Поставщики_suppliers) тогда
	//	ИНФ_API_Поставщики_suppliersПриИзменении()
	//конецесли;	
конецпроцедуры

//Процедура ИНФ_API_Поставщики_suppliersПриИзменении()
//	Прайсы.Очистить();
//	
//	для каждого СтрТ из ИНФ_API_Поставщики_suppliers.Прайсы цикл
//		Прайсы.Добавить(СтрТ.code,,СтрТ.Активный,);
//	конеццикла;	
//КонецПроцедуры

//Процедура ПрайсыВыбор(Элемент, ЭлементСписка)
//	// Вставить содержимое обработчика.
//	ЭлементСписка.Пометка = не ЭлементСписка.Пометка;

//КонецПроцедуры

Процедура ФлВключитьПроценкуПоAPIПриИзменении()
	//Элементыформы.Панель1.Видимость = элементыформы.ФлВключитьПроценкуПоAPI.Значение;
	//Элементыформы.ОсновныеДействияФормы.кнопки.ПодменюАПИ.кнопки.кнПроценить.Доступность = элементыформы.ФлВключитьПроценкуПоAPI.Значение;
	//Элементыформы.ОсновныеДействияФормы.кнопки.ПодменюАПИ.кнопки.кнСоздатьЗаказыКлиента.Доступность = элементыформы.ФлВключитьПроценкуПоAPI.Значение;
	
	Если ФлВключитьПроценкуПоAPI=Истина тогда
		ПробоватьЗаполнитьАпиПоставщика();
		ПробоватьЗаполнитьЛокальногоПоставщика();
	конецесли;
	
	сформироватьНадписьКнопки_Действие()
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	ФлВключитьПроценкуПоAPIПриИзменении();
	
	ИтогКоличествоРаспределено = 0;
	ИтогСуммаРаспределено= 0;
	сформироватьНадписьКнопки_Действие();
	УправлениеДоступностью();
	
КонецПроцедуры

Процедура сформироватьНадписьКнопки_Действие() 
	
	Если ФлВключитьПроценкуПоAPI=Истина тогда
		//Элементыформы.ОсновныеДействияФормы.Кнопки.Действие.Текст = "Далее";
		Элементыформы.ДействиеДалее.Заголовок = "Далее";
	Иначе
		//Элементыформы.ОсновныеДействияФормы.Кнопки.Действие.Текст = "Загрузить Excel в Заказ-клиента" ; 
		Элементыформы.ДействиеДалее.Заголовок = "Далее";
	КонецЕсли;
	
конецпроцедуры


Процедура ПроценитьНажатие(Кнопка)
	
	ЕстьОш = ложь;
	Если Элементыформы.ФлВключитьПроценкуПоAPI.Значение тогда
		ЕстьВыбранныеПрайсы = ложь;
		для каждого СтрТ из ТЗ_Настройка_ПрайсыПоставщиков цикл
			Если СтрТ.выбран тогда
				ЕстьВыбранныеПрайсы = истина;
			конецесли;					
		конеццикла;	
		
		Если НЕ ЕстьВыбранныеПрайсы  тогда
			//сообщить ("Не указан лого поставщика для проценки по API");
			ЕстьОш = истина;
		конецесли;	
	конецесли;	
	
	ТЗ_2 = ТЗ_.Скопировать();
	//ТЗ_2.Свернуть("Бренд,Номер,Распределено,Количество,Цена,Сумма,ИДСтроки,БрендСсылка","");
	//ТЗ_2.Свернуть("Бренд,Номер,Распределено,Количество,БрендСсылка","");
	
	Если ТЗ_2.Количество() = 0 или ЕстьОш тогда 
		Если  ТЗ_2.Количество() = 0 тогда 
			ПоказатьПредупреждение(, "Нет данных для запроса. Загрузите ексель");
		конецесли;	
		
		Если  ЕстьОш тогда 
			ПоказатьПредупреждение(, "Не указан лого(прайс) поставщика для проценки по API");
		конецесли;	
	иначе	
		
		//Если ТЗ_СозданныеПроценкиПоПоставщикам.Количество()>0 тогда
		//	Т_вопроса ="Проценка уже была создана. Создать новую?";
		//иначе
		//	Т_вопроса ="Создать API-проценку?";
		//конецесли;	
		ПослДата = Неопределено;
		ПроценкаЗапущена = ложь;
		
		//	ТЗ_СозданныеПроценкиПоПоставщикам.Колонки.Добавить("Поставщик");
		//	ТЗ_СозданныеПроценкиПоПоставщикам.Колонки.Добавить("Статус")
		
		//Если Вопрос(Т_вопроса ,РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да тогда
		
		Для каждого СтрПроценка Из ТЗ_СозданныеПроценкиПоПоставщикам Цикл
			ПроценкаОбъект = СтрПроценка.ПроценкаСсылка.ПолучитьОбъект();
			ПроценкаОбъект.ПометкаУдаления = Истина;
			ПроценкаОбъект.Записать();
		КонецЦикла;
		
		ТЗ_ДанныеПроценки.Очистить();
		ТЗ_СозданныеПроценкиПоПоставщикам.Очистить();	
		ТЗ_РазобраноПоПоставщикам.Очистить();
		ПРМ_ТЗ_РазобраноПоПоставщикам.Очистить();
		
		ИтогКоличествоРаспределено = 0;
		ИтогСуммаРаспределено= 0;
		
		Попытка
			Элементыформы.ТЗ_РазобраноПоПоставщикам.Колонки.Количество.ТекстПодвала = ИтогКоличествоРаспределено;
			Элементыформы.ТЗ_РазобраноПоПоставщикам.Колонки.Цена.ТекстПодвала = ИтогСуммаРаспределено;
		исключение
		конецпопытки;	
		
		для каждого СтрТ из ТЗ_Настройка_ПрайсыПоставщиков цикл
			Если СтрТ.выбран тогда
				НстрТЧ = ТЗ_СозданныеПроценкиПоПоставщикам.Добавить();
				НстрТЧ.Поставщик =  СтрТ.Поставщик;
			конецесли;
		конеццикла;	
		
		//ТЗ_СозданныеПроценкиПоПоставщикам.Свернуть("ЗаказПокупателя, Поставщик,IDПроценки,ПроценкаСсылка,Отработана,ОтработанаCОшибками,Статус,Загружено,ДатаСоздания,ДатаОбновления","");
		ТЗ_СозданныеПроценкиПоПоставщикам.Свернуть("Поставщик,IDПроценки,ПроценкаСсылка,Отработана,ОтработанаCОшибками,Статус,Загружено,ДатаСоздания,ДатаОбновления","");
		
		для каждого СтрТ из ТЗ_СозданныеПроценкиПоПоставщикам цикл
			Если Значениезаполнено(СтрТ.IDПроценки) тогда
				// чтобы второй раз не запустить проценку
				Продолжить
			КонецЕсли;
			
			СтрТ.Загружено = Ложь;
			
			Отбор_= Новый Структура();
			Отбор_.Вставить("Поставщик",СтрТ.Поставщик);
			Отбор_.Вставить("Выбран",Истина);
			мСтроки_ = ТЗ_Настройка_ПрайсыПоставщиков.НайтиСтроки(Отбор_);
			
			МассивПрайсов = новый Массив();
			для каждого СтрТм из мСтроки_  цикл
				МассивПрайсов.Добавить(СтрТм.ПрайсПоставщика);
			конеццикла;
			
			СтрДанных = Новый Структура();
			СтрДанных.Вставить("ТЗ_",ТЗ_2);
			СтрДанных.Вставить("МассивПрайсов",МассивПрайсов);
			СтрДанных.Вставить("ИНФ_API_Поставщики_suppliers",СтрТ.Поставщик);		
			
			СтрОтвета = ИНФ_ОбменССайтом.СозданиеПроценки(СтрДанных);
			Если СтрОтвета<> Неопределено тогда
				РезультатОтвета = СтрОтвета.ОтветСервера;
				ТекстЗапроса=СтрОтвета.ТекстЗапроса;
				
				Если РезультатОтвета.свойство("data") Тогда
					ПроценкаЗапущена	= Истина;
					ПослДата			= ИНФ.КонвертироватьДатуISO8601ВДату(РезультатОтвета.data.updated_at).Дата;
					
					СтрТ.IDПроценки			= РезультатОтвета.data.uuid;      
					СтрТ.Статус				= РезультатОтвета.data.state;
					//СтрТ.ПроценкаСсылка		= СоздатьЭлементСправочникаПроценка(РезультатОтвета,ТекстЗапроса, Элементыформы.ЗаказПокупателя.Значение);
					СтрТ.ПроценкаСсылка		= СоздатьЭлементСправочникаПроценка(РезультатОтвета,ТекстЗапроса, ТабЗаказы.ВыгрузитьКолонку("ЗаказПокупателя"));
					//СтрТ.ЗаказПокупателя	= СтрТ.ПроценкаСсылка.ЗаказПокупателя;
					СтрТ.ДатаСоздания		= СтрТ.ПроценкаСсылка.ДатаСоздания;
					СтрТ.ДатаОбновления		= СтрТ.ПроценкаСсылка.ДатаОбновления;
					
				КонецЕсли;	
			конецесли;	 
		конеццикла;
		
		Если ПроценкаЗапущена тогда
			СформироватьНадписьОЗапускеПроценки(ПослДата);
			ПодключитьОбработчикОжидания("ОбновитьСтатусПроценки", 5, Ложь);
		конецесли;	
		//конецесли;	
	конецесли;		
	
	Элементыформы.ТЗ_СозданныеПроценкиПоПоставщикам.СоздатьКолонки();
	
	//ТЗ_СозданныеПроценкиПоПоставщикам.Сортировать("APIПоставщик Возр, APIНаименованиеПрайса Возр");
	
	//Элементыформы.Панель1.ТекущаяСтраница = Элементыформы.Панель1.Страницы.Страница1;
	
	УправлениеДоступностью();
	
КонецПроцедуры

Процедура КоманднаяПанель4ЗаменитьПроценку(Кнопка)
	
	ЕстьОш = ложь;
	Если Элементыформы.ФлВключитьПроценкуПоAPI.Значение тогда
		ЕстьВыбранныеПрайсы = ложь;
		для каждого СтрТ из ТЗ_Настройка_ПрайсыПоставщиков цикл
			Если СтрТ.выбран тогда
				ЕстьВыбранныеПрайсы = истина;
			конецесли;					
		конеццикла;	
		
		Если НЕ ЕстьВыбранныеПрайсы  тогда
			//сообщить ("Не указан лого поставщика для проценки по API");
			ЕстьОш = истина;
		конецесли;	
	конецесли;	
	
	ТЗ_2 = ТЗ_.Скопировать();
	//ТЗ_2.Свернуть("Бренд,Номер,Распределено,Количество,Цена,Сумма,ИДСтроки,БрендСсылка","");
	//ТЗ_2.Свернуть("Бренд,Номер,Распределено,Количество,БрендСсылка","");
	
	Если ТЗ_СозданныеПроценкиПоПоставщикам.Количество() = 0 или ЕстьОш тогда 
		Если  ТЗ_2.Количество() = 0 тогда 
			ПоказатьПредупреждение(, "Нет проценок.");
		конецесли;	
		
		Если  ЕстьОш тогда 
			ПоказатьПредупреждение(, "Не указан лого(прайс) поставщика для проценки по API");
		конецесли;	
	Иначе	
		
		ПослДата = Неопределено;
		ПроценкаЗапущена = ложь;
		
		Поставщик = ЭлементыФормы.ТЗ_СозданныеПроценкиПоПоставщикам.ТекущаяСтрока.ПроценкаСсылка.Поставщик;

		ПроценкаОбъект = ЭлементыФормы.ТЗ_СозданныеПроценкиПоПоставщикам.ТекущаяСтрока.ПроценкаСсылка.ПолучитьОбъект();
		ПроценкаОбъект.ПометкаУдаления = Истина;
		ПроценкаОбъект.Записать();
		
		ТЗ_СозданныеПроценкиПоПоставщикам.Удалить(ЭлементыФормы.ТЗ_СозданныеПроценкиПоПоставщикам.ТекущаяСтрока);
		
		Для каждого СтрПроценка Из ТЗ_СозданныеПроценкиПоПоставщикам Цикл
			СтрПроценка.Загружено = Ложь;
		КонецЦикла;
		
		ТЗ_ДанныеПроценки.Очистить();
		//ТЗ_СозданныеПроценкиПоПоставщикам.Очистить();	
		//ТЗ_РазобраноПоПоставщикам.Очистить();
		//ПРМ_ТЗ_РазобраноПоПоставщикам.Очистить();
		
		ИтогКоличествоРаспределено = 0;
		ИтогСуммаРаспределено= 0;
		
		Попытка
			Элементыформы.ТЗ_РазобраноПоПоставщикам.Колонки.Количество.ТекстПодвала = ИтогКоличествоРаспределено;
			Элементыформы.ТЗ_РазобраноПоПоставщикам.Колонки.Цена.ТекстПодвала = ИтогСуммаРаспределено;
		исключение
		конецпопытки;	
		
		//для каждого СтрТ из ТЗ_Настройка_ПрайсыПоставщиков цикл
		//	Если СтрТ.выбран тогда
		//		НстрТЧ = ТЗ_СозданныеПроценкиПоПоставщикам.Добавить();
		//		НстрТЧ.Поставщик =  СтрТ.Поставщик;
		//	конецесли;
		//конеццикла;	
		
		НстрТЧ = ТЗ_СозданныеПроценкиПоПоставщикам.Добавить();
		НстрТЧ.Поставщик =  Поставщик;
		
		//ТЗ_СозданныеПроценкиПоПоставщикам.Свернуть("ЗаказПокупателя, Поставщик,IDПроценки,ПроценкаСсылка,Отработана,ОтработанаCОшибками,Статус,Загружено,ДатаСоздания,ДатаОбновления","");
		ТЗ_СозданныеПроценкиПоПоставщикам.Свернуть("Поставщик,IDПроценки,ПроценкаСсылка,Отработана,ОтработанаCОшибками,Статус,Загружено,ДатаСоздания,ДатаОбновления","");
		
		для каждого СтрТ из ТЗ_СозданныеПроценкиПоПоставщикам цикл
			Если Значениезаполнено(СтрТ.IDПроценки) тогда
				// чтобы второй раз не запустить проценку
				Продолжить
			КонецЕсли;
			
			СтрТ.Загружено = Ложь;
			
			Отбор_= Новый Структура();
			Отбор_.Вставить("Поставщик",СтрТ.Поставщик);
			Отбор_.Вставить("Выбран",Истина);
			мСтроки_ = ТЗ_Настройка_ПрайсыПоставщиков.НайтиСтроки(Отбор_);
			
			МассивПрайсов = новый Массив();
			для каждого СтрТм из мСтроки_  цикл
				МассивПрайсов.Добавить(СтрТм.ПрайсПоставщика);
			конеццикла;
			
			СтрДанных = Новый Структура();
			СтрДанных.Вставить("ТЗ_",ТЗ_2);
			СтрДанных.Вставить("МассивПрайсов",МассивПрайсов);
			СтрДанных.Вставить("ИНФ_API_Поставщики_suppliers",СтрТ.Поставщик);		
			
			СтрОтвета = ИНФ_ОбменССайтом.СозданиеПроценки(СтрДанных);
			Если СтрОтвета<> Неопределено тогда
				РезультатОтвета = СтрОтвета.ОтветСервера;
				ТекстЗапроса=СтрОтвета.ТекстЗапроса;
				
				Если РезультатОтвета.свойство("data") Тогда
					ПроценкаЗапущена	= Истина;
					ПослДата			= ИНФ.КонвертироватьДатуISO8601ВДату(РезультатОтвета.data.updated_at).Дата;
					
					СтрТ.IDПроценки			= РезультатОтвета.data.uuid;      
					СтрТ.Статус				= РезультатОтвета.data.state;
					СтрТ.ПроценкаСсылка		= СоздатьЭлементСправочникаПроценка(РезультатОтвета,ТекстЗапроса, ТабЗаказы.ВыгрузитьКолонку("ЗаказПокупателя"));
					//СтрТ.ЗаказПокупателя	= СтрТ.ПроценкаСсылка.ЗаказПокупателя;
					СтрТ.ДатаСоздания		= СтрТ.ПроценкаСсылка.ДатаСоздания;
					СтрТ.ДатаОбновления		= СтрТ.ПроценкаСсылка.ДатаОбновления;
					
				КонецЕсли;	
			конецесли;	 
		конеццикла;
		
		Если ПроценкаЗапущена тогда
			СформироватьНадписьОЗапускеПроценки(ПослДата);
			ПодключитьОбработчикОжидания("ОбновитьСтатусПроценки", 10, Ложь);
		конецесли;	
	конецесли;		
	
	Элементыформы.ТЗ_СозданныеПроценкиПоПоставщикам.СоздатьКолонки();
	
	УправлениеДоступностью();
	
КонецПроцедуры



Функция СоздатьЭлементСправочникаПроценка(рез, ТекстЗапроса, СписокЗаказов = Неопределено)
	
	возврат ИНФ_ОбменССайтом.СоздатьЭлементСправочникаПроценка(рез, ТекстЗапроса, СписокЗаказов)
	//	НовЭлПроценки =	Справочники.ИНФ_API_Проценки.СоздатьЭлемент();
	//	НовЭлПроценки.ID = рез.data.uuid;
	//	//НовЭлПроценки.ЗаказПокупателя= этотобъект.Ссылка;
	//	НовЭлПроценки.Статус = рез.data.state;
	//				
	//	НовЭлПроценки.Поставщик = справочники.ИНФ_API_Поставщики_suppliers.НайтиПокоду(рез.data.supplier);
	//	ДатаСоздания = ИНФ.КонвертироватьДатуISO8601ВДату(рез.data.created_at);
	// 	НовЭлПроценки.ДатаСоздания = ДатаСоздания.Дата;
	//	НовЭлПроценки.ТекстЗапроса =ТекстЗапроса;
	////				
	////				
	//	ДатаОбновления = ИНФ.КонвертироватьДатуISO8601ВДату(рез.data.updated_at);
	//	НовЭлПроценки.ДатаОбновления = ДатаОбновления.Дата;
	////				
	//	для каждого элПрайса из  рез.data.price_lists цикл
	//		НстрТЧ = НовЭлПроценки.Прайсы.Добавить();
	//		НстрТЧ.Прайс =  элПрайса;
	//	конеццикла;
	//				
	//	НовЭлПроценки.Записать();
	//	возврат НовЭлПроценки.Ссылка;
	
	
конецфункции


Процедура тСтатусПроценкиНажатие()
	
	ОбновитьСтатусПроценки();
	
	Если НЕ ТЗ_ДанныеПроценки.Количество() = 0 И НЕ ПРМ_ТЗ_РазобраноПоПоставщикам.Количество() = 0 Тогда
		Элементыформы.Панель1.ТекущаяСтраница = Элементыформы.Панель1.Страницы.Страница1;
	КонецЕсли;
	
	УправлениеДоступностью();

КонецПроцедуры


Процедура СформироватьНадписьОЗапускеПроценки(ПослДата)
	
	т_сошибками=  ?(ТЗ_СозданныеПроценкиПоПоставщикам.итог("ОтработанаCОшибками")>0, " (с ошибками: "+ сокрлп(ТЗ_СозданныеПроценкиПоПоставщикам.итог("ОтработанаCОшибками"))+")","");
	
	Если ТЗ_СозданныеПроценкиПоПоставщикам.Количество() =  ТЗ_СозданныеПроценкиПоПоставщикам.итог("Отработана") тогда
		ЭлементыФормы.тТекстПроСтатус.Заголовок = "Отработано. "+ т_сошибками;
	иначе	
		ЭлементыФормы.тТекстПроСтатус.Заголовок = "В процессе: "+Сокрлп(ТЗ_СозданныеПроценкиПоПоставщикам.итог("Отработана"))+" / "+Сокрлп(ТЗ_СозданныеПроценкиПоПоставщикам.Количество())+" (" +ПослДата+") "+т_сошибками;
	конецесли;
	
конецпроцедуры

Процедура ИндикаторСтаус()
	
	Если НЕ ТЗ_СозданныеПроценкиПоПоставщикам.Количество() = 0 Тогда
		Индикатор1 = ТЗ_СозданныеПроценкиПоПоставщикам.Итог("Отработана")*100/ТЗ_СозданныеПроценкиПоПоставщикам.Количество()
	КонецЕсли; 
		
КонецПроцедуры

Процедура ОбновитьСтатусПроценки() Экспорт
	
	Для каждого СтрТ из ТЗ_СозданныеПроценкиПоПоставщикам Цикл
		Если Не ЗначениеЗаполнено(стрТ.IDПроценки) Тогда
			Продолжить
		КонецЕсли;
		
		Если сокрлп(СтрТ.Статус) <> "OK" тогда
			РезПроценки = ИНФ_ОбменССайтом.ПолучитьИнформациюПоВыбраннойПроценке(стрТ.IDПроценки);
			Если РезПроценки <> Неопределено тогда
				Если  РезПроценки.свойство("data") тогда
					СтрТ.Статус	 = РезПроценки.data.state;
					ПослДата = ИНФ.КонвертироватьДатуISO8601ВДату(РезПроценки.data.updated_at).Дата;
					
					Если сокрлп(СтрТ.Статус) = "FAIL" тогда
						СтрТ.Отработана =1;
						СтрТ.ОтработанаCОшибками=1;
					конецЕсли;		
					
					Если сокрлп(СтрТ.Статус) = "OK" тогда
						СтрТ.Отработана =1;
						ЗагрузитьРезультатПроценки(стрТ.IDПроценки,стрТ);
					конецЕсли;		
				конецЕсли;		
			конецЕсли;			
		иначеЕсли сокрлп(СтрТ.Статус) = "OK" тогда
			СтрТ.Отработана =1;
			ЗагрузитьРезультатПроценки(стрТ.IDПроценки,стрТ);
		конецЕсли;
		
		ПроцОбъект			= СтрТ.ПроценкаСсылка.ПолучитьОбъект();
		ПроцОбъект.Статус	= СтрТ.Статус;
		ПроцОбъект.записать();
		
	конеццикла;	
	
	ОтборЗагруженых = Новый Структура();
	ОтборЗагруженых.Вставить("Загружено",Истина);
	СтрокиЗагруженых = ТЗ_СозданныеПроценкиПоПоставщикам.НайтиСтроки(ОтборЗагруженых);
	
	Если ТЗ_СозданныеПроценкиПоПоставщикам.Количество() =  СтрокиЗагруженых.Количество() тогда
		ОтключитьОбработчикОжидания("ОбновитьСтатусПроценки");
		РаспределитьТоварыЗаказаКлиента_ПоПоставщикам();
	конецЕсли;
	
	СформироватьНадписьОЗапускеПроценки(ПослДата);
	
	ИндикаторСтаус();
	
	//ТЗ_ДанныеПроценки.Свернуть("brand,created_at,delivery_days,delivery_type,name_en,name_ru,packing,partnumber,price,price_list,quantity,Остаток,quotation_item_id,reference,weight,ПоставщикКонтрагент,ИНФ_API_Поставщики_suppliers,БрендСсылка,delivery_days_min,delivery_days_max,brand_name", "");
	//ТЗ_ДанныеПроценки.Свернуть("brand,created_at,delivery_days,delivery_type,name_en,name_ru,packing,partnumber,price,price_list,quantity,Остаток,reference,weight,ПоставщикКонтрагент,ИНФ_API_Поставщики_suppliers,БрендСсылка,delivery_days_min,delivery_days_max,brand_name", "");
	ТЗ_ДанныеПроценки.Свернуть("brand,delivery_days,delivery_type,name_en,name_ru,packing,partnumber, Валюта, Курс, price, price_2, price_list,quantity,Остаток,reference,weight, volume,ПоставщикКонтрагент,ИНФ_API_Поставщики_suppliers,БрендСсылка,delivery_days_min,delivery_days_max,brand_name", "");
	ТЗ_ДанныеПроценки.Сортировать("partnumber возр, price_2 возр, delivery_days_min возр"); //тест
	
	УправлениеДоступностью();
	
	//Если Значениезаполнено (IDПроценки) тогда
	//	
	//		
	//		РезПроценки = ИНФ_ОбменССайтом.ПолучитьИнформациюПоВыбраннойПроценке(IDПроценки);
	//	 	Если РезПроценки<> Неопределено тогда
	//			Если  РезПроценки.свойство("data") тогда
	//				 тСтатусПроценки	 = РезПроценки.data.state;
	//				 тТекстПроСтатус  = сокрлп(тСтатусПроценки) + " ("+ИНФ.КонвертироватьДатуISO8601ВДату(РезПроценки.data.updated_at).Дата+" )";
	//			конецесли;		
	//		конецесли;			
	//    иначеесли сокрлп(тСтатусПроценки) = "OK" тогда
	//		ОтключитьОбработчикОжидания ("ОбновитьСтатусПроценки");
	//		
	//		ЗагрузитьРезультатПроценки();
	//		
	//	конецесли;		
	//конецесли;
	
конецпроцедуры	


Процедура ЗагрузитьРезультатПроценки(IDПроценки, СтрТЧ_ТЗ_СозданныеПроценкиПоПоставщикам)
	
	Если не СтрТЧ_ТЗ_СозданныеПроценкиПоПоставщикам.Загружено тогда
		//	ТЗ_ДанныеПроценки.Очистить();
		РезПроценки = ИНФ_ОбменССайтом.ПолучитьРезультатПроценки(IDПроценки);
		Если РезПроценки<> Неопределено тогда
			Если  РезПроценки.свойство("data") тогда
				
				ПроценкаОбъект	=   СтрТЧ_ТЗ_СозданныеПроценкиПоПоставщикам.ПроценкаСсылка.ПолучитьОбъект();
				
				ВалютаР	= Константы.ВалютаРегламентированногоУчета.Получить();
				
				Для каждого ЭлМ Из РезПроценки.data цикл
					
					// записть в справочник
					НстрТЧ_ПроценкаОбъект = ПроценкаОбъект.РезультатПроценки.Добавить();
					ЗаполнитьЗначенияСвойств(НстрТЧ_ПроценкаОбъект,ЭлМ);
					Если Не ЗначениеЗаполнено(ЭлМ.name_ru) Тогда
						НстрТЧ_ПроценкаОбъект.НаименованиеРус = ИНФ.РусскоеИмяПоУмолчанию();
					Иначе
						НстрТЧ_ПроценкаОбъект.НаименованиеРус = ЭлМ.name_ru;	
					КонецЕсли;	
					
					Если Не ЗначениеЗаполнено(ЭлМ.name_en) Тогда
						НстрТЧ_ПроценкаОбъект.НаименованиеАнгл = ИНФ.АнглИмяПоУмолчанию();
					Иначе
						НстрТЧ_ПроценкаОбъект.НаименованиеАнгл = ЭлМ.name_en;
					КонецЕсли;	
					
					НстрТЧ_ПроценкаОбъект.weight = НстрТЧ_ПроценкаОбъект.weight;
					НстрТЧ_ПроценкаОбъект.volume = НстрТЧ_ПроценкаОбъект.volume;
					НстрТЧ_ПроценкаОбъект.Бренд= Справочники.ИНФ_Бренд.НайтиПоНаименованию(ЭлМ.brand_name);
					ПроценкаОбъект.ДатаОбновления = ИНФ.КонвертироватьДатуISO8601ВДату(ЭлМ.created_at).дата;
					
					НстрТЧ_ПроценкаОбъект.прайс	= ЭлМ.price_list;
					
					//==============
					НстрТЧ = ТЗ_ДанныеПроценки.Добавить();	    
					ЗаполнитьЗначенияСвойств(НстрТЧ,ЭлМ);
					
					//НстрТЧ.created_at = ИНФ.КонвертироватьДатуISO8601ВДату(ЭлМ.created_at).дата;
					
					Если Не ЗначениеЗаполнено(ЭлМ.name_ru) тогда
						НстрТЧ.name_ru = ИНФ.РусскоеИмяПоУмолчанию();
					конецесли;	
					
					Если Не ЗначениеЗаполнено(ЭлМ.name_en) тогда     
						НстрТЧ.name_en = ИНФ.АнглИмяПоУмолчанию();
					конецесли;	
					НстрТЧ.weight = НстрТЧ.weight;
					НстрТЧ.volume = ЭлМ.volume;
					
					НстрТЧ.Остаток = ЭлМ.quantity;
					
					НстрТЧ.ПоставщикКонтрагент	 		= СтрТЧ_ТЗ_СозданныеПроценкиПоПоставщикам.Поставщик.Контрагент;
					НстрТЧ.ИНФ_API_Поставщики_suppliers	= СтрТЧ_ТЗ_СозданныеПроценкиПоПоставщикам.Поставщик;
					НстрТЧ.БрендСсылка					= Справочники.ИНФ_Бренд.НайтиПоНаименованию(НстрТЧ.brand_name);
					//НстрТЧ.Валюта						= ?(ЗначениеЗаполнено(СтрТЧ_ТЗ_СозданныеПроценкиПоПоставщикам.Поставщик.Валюта), СтрТЧ_ТЗ_СозданныеПроценкиПоПоставщикам.Поставщик.Валюта, СтрТЧ_ТЗ_СозданныеПроценкиПоПоставщикам.Поставщик.ДоговорКонтрагента.ВалютаВзаиморасчетов);
												
					КурсПоставщика = ?(СтрТЧ_ТЗ_СозданныеПроценкиПоПоставщикам.Поставщик.Валюта = ВалютаР, 1, СтрТЧ_ТЗ_СозданныеПроценкиПоПоставщикам.Поставщик.КурсВалюты);
					НстрТЧ.Валюта						= СтрТЧ_ТЗ_СозданныеПроценкиПоПоставщикам.Поставщик.Валюта;
					НстрТЧ.Курс							= КурсПоставщика;
					НстрТЧ.price_2						= НстрТЧ.price*КурсПоставщика;

					//НстрТЧ.Валюта						= СтрТЧ_ТЗ_СозданныеПроценкиПоПоставщикам.Поставщик.Валюта;
					//НстрТЧ.Курс							= СтрТЧ_ТЗ_СозданныеПроценкиПоПоставщикам.Поставщик.КурсВалюты;
					//НстрТЧ.price_2						= НстрТЧ.price*НстрТЧ.Курс;
				конеццикла;
				
				//ТЗ_ДанныеПроценки.Свернуть("brand,created_at,delivery_days,delivery_type,name_en,name_ru,packing,partnumber,price,price_list,quantity,Остаток,reference,weight,ПоставщикКонтрагент,ИНФ_API_Поставщики_suppliers,БрендСсылка,delivery_days_min,delivery_days_max,brand_name", "");
				ТЗ_ДанныеПроценки.Свернуть("brand,delivery_days,delivery_type,name_en,name_ru,packing,partnumber, Валюта, Курс, price, price_2, price_list,quantity,Остаток,reference,weight, volume, ПоставщикКонтрагент,ИНФ_API_Поставщики_suppliers,БрендСсылка,delivery_days_min,delivery_days_max,brand_name", "");
				ТЗ_ДанныеПроценки.Сортировать("partnumber возр, price_2 возр, delivery_days_min возр");
				
				СтрТЧ_ТЗ_СозданныеПроценкиПоПоставщикам.Загружено = истина;
				ПроценкаОбъект.записать();
			конецесли;	
		конецесли;
	конецесли;	
	
конецпроцедуры		


Процедура РаспределитьТоварыЗаказаКлиента_ПоПоставщикам()
	
	Для каждого Стр_ТЗ_ДанныеПроценки Из ТЗ_ДанныеПроценки Цикл
		Стр_ТЗ_ДанныеПроценки.Остаток	= Стр_ТЗ_ДанныеПроценки.quantity;
	КонецЦикла;
	
	// сюда доабвляем товары из прайсов которые отмечены в настройке
	СписокЛокальныхПрайсов = Новый СписокЗначений();
	Для Каждого ЭлТ Из ТЗ_Настройка_ПрайсыПоставщиковЛокальные цикл
		Если ЭлТ.Выбран Тогда
			СписокЛокальныхПрайсов.Добавить(ЭлТ.Прайс);
		КонецЕсли;
	КонецЦикла;	
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("СписокЛокальныхПрайсов", СписокЛокальныхПрайсов);
	Запрос.УстановитьПараметр("Бренд",Справочники.ИНФ_Бренд.ПустаяСсылка());
	Запрос.УстановитьПараметр("Номер","");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИНФ_ТоварыПоставщика.Бренд,
	|	ИНФ_ТоварыПоставщика.Номер,
	|	ИНФ_ТоварыПоставщика.Наименование,
	|	ИНФ_ТоварыПоставщика.Количество,
	|	ИНФ_ТоварыПоставщика.Цена,
	|	0 КАК Цена_2,
	|	ИНФ_ТоварыПоставщика.Вес,
	|	ИНФ_ТоварыПоставщика.Объем,
	|	ИНФ_ТоварыПоставщика.НаименованиеРус,
	|	ИНФ_ТоварыПоставщика.Кратность,
	|	ИНФ_ТоварыПоставщика.СхемаНастройки,
	|	ИНФ_ТоварыПоставщика.УникальныйИД,
	|	ИНФ_ТоварыПоставщика.НеЧисловойОстаток,
	|	ВЫРАЗИТЬ(ИНФ_ТоварыПоставщика.СхемаНастройки.Наименование КАК СТРОКА(100)) КАК НаименованиеПрайса,
	|	ИНФ_ТоварыПоставщика.Номер КАК reference
	|ИЗ
	|	РегистрСведений.ИНФ_ТоварыПоставщика КАК ИНФ_ТоварыПоставщика
	|ГДЕ
	|	ИНФ_ТоварыПоставщика.СхемаНастройки В(&СписокЛокальныхПрайсов)
	|	И ИНФ_ТоварыПоставщика.Бренд <> &Бренд
	|	И ИНФ_ТоварыПоставщика.Номер <> &Номер";
	
	ТЗ_ТоварыИзПрайсов = Запрос.Выполнить().Выгрузить();
	
	ТЗ_ТоварыИзПрайсов.Индексы.Добавить("Цена");
	ТЗ_ТоварыИзПрайсов.Индексы.Добавить("Бренд");
	ТЗ_ТоварыИзПрайсов.Индексы.Добавить("Номер");
	
	// теперь у нас есть товары - в таблице ТЗ_
	// есть список проценок - в таблице ТЗ_ДанныеПроценки
	// есть список локальных цен - в таблице ТЗ_ТоварыИзПрайсов
	
	// надо выбрать минимальные по цене из этих 2х с отбором по 
	//ОтборЦены = Новый Структура();
	//ОтборЦены.Вставить("Бренд",Бренд);
	//ОтборЦены.Вставить("Номер",Номер);
	
	ТЗ_ТоварыИзПрайсов.Колонки.Добавить("APIПоставщик");
	ТЗ_ТоварыИзПрайсов.Колонки.Добавить("ApiБренд");
	ТЗ_ТоварыИзПрайсов.Колонки.Добавить("name_en");
	ТЗ_ТоварыИзПрайсов.Колонки.Добавить("name_ru");
	ТЗ_ТоварыИзПрайсов.Колонки.Добавить("Остаток");
	ТЗ_ТоварыИзПрайсов.Колонки.Добавить("Валюта");
	
	// сращиваем 2 таблицы. чтобы легче было искать							
	Для Каждого СтрТ из ТЗ_ДанныеПроценки цикл
		НстрТЧ =  ТЗ_ТоварыИзПрайсов.Добавить();
		НстрТЧ.name_ru		   		= СтрТ.name_ru;
		НстрТЧ.name_en			  	= СтрТ.name_en;
		НстрТЧ.Бренд				= СтрТ.БрендСсылка;	
		НстрТЧ.Вес					= СтрТ.weight;	
		НстрТЧ.Объем                = СтрТ.Volume;
		НстрТЧ.Количество   		= СтрТ.quantity;
		НстрТЧ.Остаток		   		= СтрТ.quantity;
		НстрТЧ.Кратность	 		= СтрТ.packing;
		НстрТЧ.Наименование   		= СтрТ.name_ru;
		НстрТЧ.НаименованиеРус  	= СтрТ.name_en;
		//НстрТЧ.НеЧисловойОстаток
		НстрТЧ.Номер             	= СтрТ.partnumber;
		НстрТЧ.СхемаНастройки   	= СтрТ.ИНФ_API_Поставщики_suppliers.Инф_Поставщик;
		НстрТЧ.УникальныйИД    		= СтрТ.reference; // это значение приходит из АПИ. но я его отправляю в запросе на создать проценку. 
		НстрТЧ.Цена 				= СтрТ.price;
		НстрТЧ.Цена_2 				= СтрТ.price_2;
		НстрТЧ.Валюта 				= СтрТ.Валюта;
		// данные которые нужны будуть для заказа по апи протоколу
		НстрТЧ.APIПоставщик			= СтрТ.ИНФ_API_Поставщики_suppliers;
		НстрТЧ.НаименованиеПрайса	= сокрлп(СтрТ.Price_list);
		НстрТЧ.ApiБренд				= сокрлп(СтрТ.brand);
	КонецЦикла;
	
	ТЗ_ТоварыИзПрайсов.Сортировать("Цена_2 возр");
	
	ТЗ_РазобраноПоПоставщикам.Очистить();
	ПРМ_ТЗ_РазобраноПоПоставщикам.Очистить();
	
	ИтогКоличествоРаспределено = 0;
	ИтогСуммаРаспределено = 0;
	
	ВалютаР   = Справочники.Валюты.НайтиПоКоду("784");
	ВалютаРуб = Справочники.Валюты.НайтиПоКоду("643");
	ВалютаUSD = Справочники.Валюты.НайтиПоКоду("840");
	
	// распределяем
	ТЗ_.ЗаполнитьЗначения(0, "Распределено");
	КРаспределению = 0;
	Для каждого СтрТ из ТЗ_ цикл
		
		//КРаспределению = СтрТ.Количество - СтрТ.Распределено;
		
		Номер				= инф.УбратьИзНомераЗапрещенныеСимволы( СтрТ.Номер);
		Количество			= инф.УбратьИзНомераЗапрещенныеСимволы( СтрТ.Количество);
		Бренд				= СтрТ.БрендСсылка;
		имяТЧ				= "Отсутствует в прайсах";
		
		//Отбор = Новый Структура();
		//Отбор.Вставить("Бренд",Бренд);
		//Отбор.Вставить("Номер",Номер);
		
		КурсВалютыР 			= ПолучитьКурсВалюты(ВалютаР, СтрТ.ЗаказПокупателя.Дата);
		КурсВалютыUSD			= ПолучитьКурсВалюты(ВалютаUSD, СтрТ.ЗаказПокупателя.Дата);
		КурсРуб					= ПолучитьКурсВалюты(ВалютаРуб, СтрТ.ЗаказПокупателя.Дата);
		КурсВалютыЗаказа 		= ПолучитьКурсВалюты(СтрТ.ЗаказПокупателя.ВалютаДокумента, СтрТ.ЗаказПокупателя.Дата);
				
		Отбор = Новый Структура();
		//Отбор.Вставить("Бренд",Бренд);
		Отбор.Вставить("УникальныйИД", СтрТ.ИДСтрокиПроценка);
		СтрокиПроценки = ТЗ_ТоварыИзПрайсов.НайтиСтроки(Отбор);
		
		ИНФ_ЗакупочнаяЦена			= 0;
		ИНФ_ЗакупочнаяЦена_2		= 0;
		ОстатокПоПрайсуПоставщика	= 0;
		ИмяПрайса 					= "<< не определен >>";
		Вес							= 0;
		ИНФ_Поставщик				= Справочники.Инф_Поставщик.ПустаяСсылка();
		Остаток						= 0;
		_APIПоставщик 				= "";
		_APIНаименованиеПрайса		= "";
		_ApiБренд					= "";
		
		КРаспределению = СтрТ.Количество;
		КоличествоПоЗК = СтрТ.Количество;
		Счетчик = 0;
		
		Для Каждого СтрПроценки Из СтрокиПроценки Цикл
			
			Счетчик = Счетчик + 1;
			
			_APIПоставщик 			= СтрПроценки.APIПоставщик;
			_APIНаименованиеПрайса	= СтрПроценки.НаименованиеПрайса;
			_ApiБренд				= СтрПроценки.ApiБренд;
			
			Отбор2 = Новый Структура();
			Отбор2.Вставить("reference", СтрТ.ИДСтрокиПроценка);
			Отбор2.Вставить("price_list", СтрПроценки.НаименованиеПрайса);
			СтрокиПроценкиАПИ = ТЗ_ДанныеПроценки.НайтиСтроки(Отбор2);
			
			ИНФ_ЗакупочнаяЦена		= СтрПроценки.Цена;
			ИНФ_ЗакупочнаяЦена_2	= СтрПроценки.Цена_2;
			ИНФ_Поставщик			= СтрПроценки.СхемаНастройки;
			ИмяПрайса				= СтрПроценки.НаименованиеПрайса;
			ВалютаПоставщика		= СтрПроценки.Валюта;
			
			КурсВалютыПоставщика 	= ПолучитьКурсВалюты(СтрПроценки.Валюта, СтрТ.ЗаказПокупателя.Дата);
			
			КРаспределению = СтрТ.Количество - СтрТ.Распределено;
			ОстатокПоПрайсуПоставщика = ?(СтрокиПроценкиАПИ.Количество() = 0,0,СтрокиПроценкиАПИ[0].Остаток); 
			
			//КурсВалютыПоставщика	= ПолучитьКурсВалюты(СтрПроценки.Валюта, СтрТ.ЗаказПокупателя.Дата);
			
			Если КРаспределению = 0 Тогда Прервать КонецЕсли;
			Если ОстатокПоПрайсуПоставщика = 0 Тогда 
				имяТЧ 			= "Распределен полностью";
				Продолжить 
			КонецЕсли;
			
			НстрТЧ = ТЗ_РазобраноПоПоставщикам.Добавить();
			НстрТЧ.name_en				= СтрПроценки.name_en;
			НстрТЧ.name_ru				= СтрПроценки.name_ru;
			НстрТЧ.Номенклатура			= "";
			НстрТЧ.Валюта				= СтрПроценки.Валюта;
			
			//НстрТЧ.ИНФ_ПроцентНаценки	= ПроцентНаценкиПоТекущимЦенамЗагрузки;
			
			Если КРаспределению <= ОстатокПоПрайсуПоставщика Тогда
				НстрТЧ.Количество				= КРаспределению;
				СтрТ.Распределено				= СтрТ.Распределено + КРаспределению;
			Иначе
				НстрТЧ.Количество				= ОстатокПоПрайсуПоставщика;
				СтрТ.Распределено				= СтрТ.Распределено + ОстатокПоПрайсуПоставщика;
			КонецЕсли;
			
			//Если КоличествоПоЗК > СтрТ.Распределено Тогда
			//	НстрТЧ.ИНФ_КоличествоКлиента	= КоличествоПоЗК-(СтрТ.Распределено-НстрТЧ.Количество);
			//Иначе	
			//	НстрТЧ.ИНФ_КоличествоКлиента	= НстрТЧ.Количество;
			//КонецЕсли; 
			
			НстрТЧ.ИНФ_КоличествоКлиента	= НстрТЧ.Количество;
			
			Если НЕ СтрокиПроценкиАПИ.Количество() = 0 Тогда
				Если СтрокиПроценкиАПИ[0].Остаток < КРаспределению И НЕ КРаспределению = 0 И Счетчик = СтрокиПроценки.Количество() Тогда
					//НстрТЧ.ИНФ_КоличествоКлиента = КоличествоПоЗК-(СтрТ.Распределено-НстрТЧ.Количество);
					НстрТЧ.ИНФ_КоличествоКлиента = КРаспределению;
				КонецЕсли;
				СтрокиПроценкиАПИ[0].Остаток = СтрокиПроценкиАПИ[0].Остаток - НстрТЧ.Количество;
			КонецЕсли;
			
			//ПроцентНаценкиПоТекущимЦенамЗагрузки = ИНФ.ОпределитьПроцентУвеличенияЦены(ИНФ_ЗакупочнаяЦена,СтрТ.Цена);      // цена в прайсах внутри 1С , Цена = цена из екселя
			
			НстрТЧ.ЗаказПокупателя			= СтрТ.ЗаказПокупателя;
			НстрТЧ.ИмяТЧ					= "Заказ принят";
			НстрТЧ.ИНФ_ЗакупочнаяЦена		= ИНФ_ЗакупочнаяЦена;
			НстрТЧ.ИНФ_ЗакупочнаяЦена_2		= ИНФ_ЗакупочнаяЦена_2;
			НстрТЧ.ЗакупочнаяЦенаВВалютеЗК	= ИНФ_ЗакупочнаяЦена_2 / КурсВалютыUSD * ?(СтрТ.ЗаказПокупателя.ВалютаДокумента = ВалютаРуб, КурсВалютыЗаказа, 1);	//ИНФ_ЗакупочнаяЦена;
			НстрТЧ.ИНФ_Поставщик			= ИНФ_Поставщик;
			НстрТЧ.Бренд					= Бренд;
			НстрТЧ.Номер					= Номер;
			НстрТЧ.Цена						= СтрТ.Цена;
			НстрТЧ.Цена_2					= СтрТ.Цена_2;
			//НстрТЧ.Цена_2					= СтрПроценки.Цена_2;
			НстрТЧ.Прайс					= ИмяПрайса;
			НстрТЧ.ИДСтроки					= СтрТ.ИДСтроки;
			НстрТЧ.ИДСтрокиПроценка			= СтрТ.ИДСтрокиПроценка;
			НстрТЧ.APIПоставщик 			= _APIПоставщик;
			НстрТЧ.APIНаименованиеПрайса	= _APIНаименованиеПрайса;
			НстрТЧ.ApiБренд					= _ApiБренд;
			НстрТЧ.Вес						= СтрПроценки.Вес;
			НстрТЧ.Объем					= СтрПроценки.Объем;
			НстрТЧ.Валюта					= СтрПроценки.Валюта;
			
			//НашаМаржаМинимальная = ?(ЗаказПокупателя.ИНФ_НаправлениеДоставкиЗаказа.Маржа = 0, ЗаказПокупателя.ИНФ_НаправлениеДоставкиЗаказа.Направление.Маржа, ЗаказПокупателя.ИНФ_НаправлениеДоставкиЗаказа.Маржа);
			НашаМаржаМинимальная = СтрТ.ЗаказПокупателя.Маржа;
			
			//ЕстьНаправлениеДоставкиЦенаЗаВес = СтрТ.ЗаказПокупателя.ИНФ_НаправлениеДоставкиЗаказа.Направление.ЦенаВесИзПрайса <> 0;
			//НеУказанВес = ЕстьНаправлениеДоставкиЦенаЗаВес И СтрПроценки.Вес = 0;  //Есть цена за вес, но в проценке вес не указан, возможен убыток при заказе 
			
			//НаценкаЗаНулевойВес 		 = ?(ЗаказПокупателя.ИНФ_НаправлениеДоставкиЗаказа.Направление.ЦенаНулевогоВеса = 0, 1, ЗаказПокупателя.ИНФ_НаправлениеДоставкиЗаказа.Направление.ЦенаНулевогоВеса/100);
			НаценкаЗаНулевойВес 		 				= СтрТ.ЗаказПокупателя.ИНФ_НаправлениеДоставкиЗаказа.Направление.ЦенаНулевогоВеса/100;
			//НеУказанаНаценкаЗаНулевойВесПриНулевомВесе  = СтрПроценки.Вес = 0 И СтрТ.ЗаказПокупателя.ИНФ_НаправлениеДоставкиЗаказа.Направление.ЦенаНулевогоВеса = 0; //Нет наценки за нулевой вес при отсутствии веса в проценке
			
			ОтказПоНулевойДоставке	= СтрТ.ЗаказПокупателя.ИНФ_НаправлениеДоставкиЗаказа.Направление.ОтказПроценкиТоваровСНулевойДоставкой;
			
			ЦенаДоставки  	= 0;
			ЦенаДоставки_2	= 0;
			                        
			//КоэффКурсаПоставщика = ?(_APIПоставщик.Валюта = Константы.ВалютаРегламентированногоУчета.Получить(), 1, КурсВалютыР*КурсВалютыПоставщика);
			
			НаправлениеЦенаВесИзПрайса = СтрТ.ЗаказПокупателя.ИНФ_НаправлениеДоставкиЗаказа.Направление.ЦенаВесИзПрайса;
			НаправлениеЦенаОбъемИзПрайса = СтрТ.ЗаказПокупателя.ИНФ_НаправлениеДоставкиЗаказа.Направление.ОбъемВесИзПрайса;
			
			ЦенаКлиента	= СтрТ.Цена_2;
			
			Если НЕ ЦенаКлиента = 0 Тогда
				//ЦенаПоставщика		= ИНФ_ЗакупочнаяЦена_2 / КурсВалютыЗаказа * _APIПоставщик.ПроцентНаценки;
				ЦенаПоставщика		= ИНФ_ЗакупочнаяЦена_2 / КурсВалютыUSD * ?(СтрТ.ЗаказПокупателя.ВалютаДокумента = ВалютаРуб, КурсВалютыЗаказа, 1) * _APIПоставщик.ПроцентНаценки;
				ЦенаПоставщика2		= ИНФ_ЗакупочнаяЦена_2 * _APIПоставщик.ПроцентНаценки; 
				
				//Если (СтрПроценки.Вес <> 0 И НаправлениеЦенаВесИзПрайса = 0 И НаценкаЗаНулевойВес = 0) 
				//	ИЛИ (СтрПроценки.Объем <> 0 И НаправлениеЦенаОбъемИзПрайса = 0) Тогда
				//	
				//	ЦенаДоставки 	= 0;
				//	ЦенаДоставки_2  = 0;
				//	
				//	Если (СтрПроценки.Вес <> 0 И НаправлениеЦенаВесИзПрайса = 0
				//		И НаценкаЗаНулевойВес <> 0) Тогда
				//		
				//		ЦенаДоставки		= ЦенаПоставщика * НаценкаЗаНулевойВес;
				//		ЦенаДоставки_2		= ЦенаПоставщика2 * НаценкаЗаНулевойВес;										
				//	
				//		ЦенаДоставки		= Окр(ЦенаДоставки + 0.005, 2, 0);
				//		ЦенаДоставки_2		= Окр(ЦенаДоставки_2 + 0.005, 2, 0);
				//	КонецЕсли;
				
				//Если (СтрПроценки.Вес <> 0 И НаправлениеЦенаВесИзПрайса = 0) ИЛИ (СтрПроценки.Вес = 0 И НаценкаЗаНулевойВес = 0) Тогда
				Если (СтрПроценки.Вес <> 0 И НаправлениеЦенаВесИзПрайса = 0 И НаценкаЗаНулевойВес = 0) ИЛИ (СтрПроценки.Вес = 0 И НаценкаЗаНулевойВес = 0) Тогда
					
				    ЦенаДоставки 	= 0;
					ЦенаДоставки_2  = 0;

				Иначе
					ЦенаДоставки		= СтрПроценки.Вес * НаправлениеЦенаВесИзПрайса * КурсВалютыЗаказа / ?(СтрТ.ЗаказПокупателя.ВалютаДокумента = ВалютаUSD, КурсВалютыЗаказа, 1)
										+ ?(СтрПроценки.Вес * НаправлениеЦенаВесИзПрайса = 0, 0, СтрПроценки.Объем * НаправлениеЦенаОбъемИзПрайса * КурсВалютыЗаказа / ?(СтрТ.ЗаказПокупателя.ВалютаДокумента = ВалютаUSD, КурсВалютыЗаказа, 1));
										
					ЦенаДоставки_2		= СтрПроценки.Вес * НаправлениеЦенаВесИзПрайса * КурсВалютыUSD
										+ ?(СтрПроценки.Вес * НаправлениеЦенаВесИзПрайса = 0, 0, СтрПроценки.Объем * НаправлениеЦенаОбъемИзПрайса * КурсВалютыUSD);
										
					//ЦенаДоставки        = СтрПроценки.Вес * НаправлениеЦенаВесИзПрайса * КурсВалютыЗаказа / ?(СтрТ.ЗаказПокупателя.ВалютаДокумента = ВалютаUSD, КурсВалютыЗаказа, 1) 
					//					+ СтрПроценки.Объем * НаправлениеЦенаОбъемИзПрайса / КурсВалютыЗаказа * ?(СтрТ.ЗаказПокупателя.ВалютаДокумента = ВалютаUSD, КурсВалютыЗаказа, 1);
					//
					//ЦенаДоставки_2		= СтрПроценки.Вес * НаправлениеЦенаВесИзПрайса * КурсВалютыUSD 
					//					+ СтрПроценки.Объем * НаправлениеЦенаОбъемИзПрайса * КурсВалютыUSD;
					
					//ЦенаДоставки		= ?(СтрПроценки.Вес = 0, ЦенаПоставщика * НаценкаЗаНулевойВес, ЦенаДоставки);
					//ЦенаДоставки_2		= ?(СтрПроценки.Вес = 0, ЦенаПоставщика2 * НаценкаЗаНулевойВес, ЦенаДоставки_2);										
					ЦенаДоставки		= ?(ЦенаДоставки = 0, ЦенаПоставщика * НаценкаЗаНулевойВес, ЦенаДоставки);
					ЦенаДоставки_2		= ?(ЦенаДоставки_2 = 0, ЦенаПоставщика2 * НаценкаЗаНулевойВес, ЦенаДоставки_2);										
					
					ЦенаДоставки		= Окр(ЦенаДоставки + 0.005, 2, 0);
					ЦенаДоставки_2		= Окр(ЦенаДоставки_2 + 0.005, 2, 0);
				КонецЕсли;
				
				//НашаЦена			= ИНФ_ЗакупочнаяЦена * _APIПоставщик.ПроцентНаценки; // + ЦенаДоставки;
				//НашаЦена			= ЦенаПоставщика; //* (1+НашаМаржаМинимальная/100); // + ЦенаДоставки;
				//НашаЦена_2			= ЦенаПоставщика2 * (1+НашаМаржаМинимальная/100) + ЦенаДоставки_2;
				НашаЦена			= ЦенаПоставщика + ЦенаДоставки;
				НашаЦена_2			= ЦенаПоставщика2 + ЦенаДоставки_2;
				
				НашаВыгода			= ЦенаКлиента - НашаЦена_2;
				
				НашаВыгодаПроцент	= ?(ЦенаПоставщика2 = 0, 100, НашаВыгода/ЦенаПоставщика2*100);
				ЦенаКлиентаМакс 	= ЦенаКлиента + (ЦенаКлиента*СтрТ.ИНФ_ПроцентНаценкиМакс)/100; 
			Иначе
				ЦенаПоставщика		= ИНФ_ЗакупочнаяЦена_2 / КурсВалютыUSD * ?(СтрТ.ЗаказПокупателя.ВалютаДокумента = ВалютаРуб, КурсВалютыЗаказа, 1) * _APIПоставщик.ПроцентНаценки; 
				ЦенаПоставщика2		= ИНФ_ЗакупочнаяЦена_2 * _APIПоставщик.ПроцентНаценки; 
				
				//Если (СтрПроценки.Вес <> 0 И НаправлениеЦенаВесИзПрайса = 0) ИЛИ (СтрПроценки.Объем <> 0 И НаправлениеЦенаОбъемИзПрайса = 0) Тогда
				//	ЦенаДоставки 	= 0;
				//	ЦенаДоставки_2  = 0;
				//	
				//	Если СтрПроценки.Вес <> 0 И НаправлениеЦенаВесИзПрайса = 0
				//		И НаценкаЗаНулевойВес <> 0 Тогда
				//		
				//		ЦенаДоставки		= ЦенаПоставщика * НаценкаЗаНулевойВес;
				//		ЦенаДоставки_2		= ЦенаПоставщика2 * НаценкаЗаНулевойВес;										
				//	
				//		ЦенаДоставки		= Окр(ЦенаДоставки + 0.005, 2, 0);
				//		ЦенаДоставки_2		= Окр(ЦенаДоставки_2 + 0.005, 2, 0);
				//	КонецЕсли;
				
				//Если (СтрПроценки.Вес <> 0 И НаправлениеЦенаВесИзПрайса = 0) ИЛИ (СтрПроценки.Вес = 0 И НаценкаЗаНулевойВес = 0) Тогда
				Если (СтрПроценки.Вес <> 0 И НаправлениеЦенаВесИзПрайса = 0 И НаценкаЗаНулевойВес = 0) ИЛИ (СтрПроценки.Вес = 0 И НаценкаЗаНулевойВес = 0) Тогда
					
				    ЦенаДоставки 	= 0;
					ЦенаДоставки_2  = 0;
					
				Иначе
					ЦенаДоставки		= СтрПроценки.Вес * НаправлениеЦенаВесИзПрайса * КурсВалютыЗаказа / ?(СтрТ.ЗаказПокупателя.ВалютаДокумента = ВалютаUSD, КурсВалютыЗаказа, 1)
										+ ?(СтрПроценки.Вес * НаправлениеЦенаВесИзПрайса = 0, 0, СтрПроценки.Объем * НаправлениеЦенаОбъемИзПрайса * КурсВалютыЗаказа / ?(СтрТ.ЗаказПокупателя.ВалютаДокумента = ВалютаUSD, КурсВалютыЗаказа, 1));
										
					ЦенаДоставки_2		= СтрПроценки.Вес * НаправлениеЦенаВесИзПрайса * КурсВалютыUSD
										+ ?(СтрПроценки.Вес * НаправлениеЦенаВесИзПрайса = 0, 0, СтрПроценки.Объем * НаправлениеЦенаОбъемИзПрайса * КурсВалютыUSD);
										
					//ЦенаДоставки		= ?(СтрПроценки.Вес = 0, ЦенаПоставщика * НаценкаЗаНулевойВес, ЦенаДоставки);
					//ЦенаДоставки_2		= ?(СтрПроценки.Вес = 0, ЦенаПоставщика2 * НаценкаЗаНулевойВес, ЦенаДоставки_2);
					ЦенаДоставки		= ?(ЦенаДоставки = 0, ЦенаПоставщика * НаценкаЗаНулевойВес, ЦенаДоставки);
					ЦенаДоставки_2		= ?(ЦенаДоставки_2 = 0, ЦенаПоставщика2 * НаценкаЗаНулевойВес, ЦенаДоставки_2);										
				
					ЦенаДоставки		= Окр(ЦенаДоставки + 0.005, 2, 0);
					ЦенаДоставки_2		= Окр(ЦенаДоставки_2 + 0.005, 2, 0);
				КонецЕсли;
														
				//НашаЦена			= (ИНФ_ЗакупочнаяЦена * _APIПоставщик.ПроцентНаценки) * (1+НашаМаржаМинимальная/100) + ЦенаДоставки;
				НашаЦена			= ЦенаПоставщика * (1+НашаМаржаМинимальная/100) + ЦенаДоставки;
				НашаЦена_2			= ЦенаПоставщика2 * (1+НашаМаржаМинимальная/100) + ЦенаДоставки_2;
									
				НашаВыгода			= НашаЦена_2 - ЦенаПоставщика2;
				НашаВыгодаПроцент	= ?(ЦенаПоставщика2 = 0, 100, НашаВыгода/ЦенаПоставщика2*100);
				ЦенаКлиентаМакс 	= ЦенаКлиента + (ЦенаКлиента*СтрТ.ИНФ_ПроцентНаценкиМакс)/100; 
			КонецЕсли;
			
			НстрТЧ.ИНФ_ПроцентНаценки	= НашаВыгодаПроцент;
			
			//ПроцентНаценкиПоТекущимЦенамЗагрузки = (НашаЦена - СтрТ.Цена)*100/СтрТ.Цена;
			//НашаВыгодаПроцент;
			НстрТЧ.НашаЦена		= НашаЦена;
			НстрТЧ.НашаЦена_2	= НашаЦена_2;
			НстрТЧ.Сумма		= НстрТЧ.НашаЦена_2 * НстрТЧ.Количество;
			
			//НстрТЧ.ЦенаДоставки	= НашаЦена - ИНФ_ЗакупочнаяЦена;
			//НстрТЧ.ЦенаДоставки_2	= НашаЦена_2 - ИНФ_ЗакупочнаяЦена_2;
			НстрТЧ.ЦенаДоставки		= ЦенаДоставки;
			НстрТЧ.ЦенаДоставки_2	= ЦенаДоставки_2;
			
			Если ЦенаКлиента = 0 Тогда
				Если ЦенаДоставки = 0 И ОтказПоНулевойДоставке Тогда
					НстрТЧ.ИмяТЧ	= "Отказ наш";
				Иначе
					НстрТЧ.ИмяТЧ	= "Проценка";
				КонецЕсли;
			ИначеЕсли НашаВыгодаПроцент < 0 Тогда
				НстрТЧ.ИмяТЧ	= "Отказ наш";
			ИначеЕсли НашаЦена_2 > ЦенаКлиентаМакс  Тогда
				НстрТЧ.ИмяТЧ	= "Отказ клиента";
			ИначеЕсли НашаВыгодаПроцент < НашаМаржаМинимальная Тогда
				НстрТЧ.ИмяТЧ	= "Отказ наш";
			КонецЕсли;
			
			//Если НстрТЧ.ИмяТЧ = "Заказ принят" И НеУказанВес Тогда
			Если НстрТЧ.ИмяТЧ = "Заказ принят" Тогда
				//Если НеУказанаНаценкаЗаНулевойВесПриНулевомВесе ИЛИ (ЦенаДоставки = 0 И ОтказПоНулевойДоставке) Тогда
				Если ЦенаДоставки = 0 И ОтказПоНулевойДоставке Тогда
					НстрТЧ.ИмяТЧ = "Отказ наш";
				КонецЕсли;
			КонецЕсли; 
			
			Если НстрТЧ.ИмяТЧ = "Заказ принят" Тогда
				ИтогКоличествоРаспределено = ИтогКоличествоРаспределено +НстрТЧ.Количество;
				ИтогСуммаРаспределено = ИтогСуммаРаспределено + НстрТЧ.Сумма;
			КонецЕсли;	
			
		КонецЦикла;
		
		Если СтрТ.Распределено = 0 Тогда
			
			НстрТЧ = ТЗ_РазобраноПоПоставщикам.Добавить();
			НстрТЧ.Номенклатура			= "";
			НстрТЧ.Количество			= 0;
			НстрТЧ.ЗаказПокупателя		= СтрТ.ЗаказПокупателя;
			НстрТЧ.ИмяТЧ				= ИмяТЧ;
			НстрТЧ.ИНФ_ЗакупочнаяЦена	= ИНФ_ЗакупочнаяЦена;
			НстрТЧ.ИНФ_ЗакупочнаяЦена_2	= ИНФ_ЗакупочнаяЦена_2;
			НстрТЧ.ИНФ_Поставщик		= ИНФ_Поставщик;
			НстрТЧ.Бренд				= Бренд;
			НстрТЧ.Номер				= Номер;
			НстрТЧ.Цена					= СтрТ.Цена;
			НстрТЧ.Цена_2				= СтрТ.Цена_2;
			НстрТЧ.Валюта				= ВалютаПоставщика;
			НстрТЧ.Прайс				= ИмяПрайса;
			НстрТЧ.ИДСтроки				= СтрТ.ИДСтроки;
			НстрТЧ.ИДСтрокиПроценка		= СтрТ.ИДСтрокиПроценка;
			НстрТЧ.Сумма				= 0;
			НстрТЧ.ИНФ_КоличествоКлиента = КРаспределению;
			
			НстрТЧ.APIПоставщик 			= _APIПоставщик;
			НстрТЧ.APIНаименованиеПрайса	= _APIНаименованиеПрайса;
			НстрТЧ.ApiБренд					= _ApiБренд;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	////в = ТЗ_ТоварыИзПрайсов.Найти(Номер,"Номер");
	//
	//Если СтрокиПроценки.Количество() = 0 тогда
	//	ИНФ_ЗакупочнаяЦена		= 0;
	//	ОстатокПоПрайсуПоставщика	= 0;
	//	ИмяПрайса 				= "<< не определен >>";
	//	Вес						= 0;
	//	ИНФ_Поставщик			= Справочники.Инф_Поставщик.ПустаяСсылка();
	//	Остаток					= 0;
	//	
	//	_APIПоставщик 			= "";
	//	_APIНаименованиеПрайса	= "";
	//	_ApiБренд				= "";
	//Иначе
	//	_APIПоставщик 				= СтрокиПроценки[0].APIПоставщик;;
	//	_APIНаименованиеПрайса		= СтрокиПроценки[0].НаименованиеПрайса;;
	//	_ApiБренд					= СтрокиПроценки[0].ApiБренд;;
	//	
	//	ИНФ_ЗакупочнаяЦена	= СтрокиПроценки[0].Цена;
	//	ИНФ_Поставщик		= СтрокиПроценки[0].СхемаНастройки; 
	//	// если есть что-то в APIПоставщик - то этот товар нашелся по свежему прайсу - из апи
	//	
	//	ОстатокПоПрайсуПоставщика = СтрокиПроценки[0].Количество;
	//	ИмяПрайса = СтрокиПроценки[0].НаименованиеПрайса;;
	//	вес = СтрокиПроценки[0].вес;
	//	Остаток     				=	СтрокиПроценки[0].Остаток;
	//	
	//	Если ФлИспользоватьЦенуИзПрайсовСНаценкой тогда
	//		НоваяЦена = инф.РассчитатьЦену(СтрТ.Цена,ИНФ_Поставщик.ПроцентНаценки,ИНФ_Поставщик.ЦенаВесИзПрайса,ИНФ_Поставщик.ОбъемВесИзПрайса,0,Вес);
	//		СтрТ.Цена =НоваяЦена;
	//	конецесли;	
	//конецесли;
	//
	//Если  ОстатокПоПрайсуПоставщика = 0 тогда
	//	// маловероянто - что у поставщика в прайсе может быть 0
	//	имяТЧ = "ТоварыОтмененные";
	//конецесли;	
	//
	//ПроцентНаценкиПоСхемеНастойки = Элементыформы.ВывбКонтрагент.Значение.ИНФ_ИсключатьПоизцииСНаценкойНаФактическкуюЗакупочнуюЦенуМенее;
	//ПроцентНаценкиПоТекущимЦенамЗагрузки = ИНФ.ОпределитьПроцентУвеличенияЦены(ИНФ_ЗакупочнаяЦена,СтрТ.Цена);      // цена в прайсах внутри 1С , Цена = цена из екселя
	//
	//Если ФлИспользоватьЦенуИзПрайсовСНаценкой тогда
	//	// если товар найден у поставмщика и идет просто проценка по поставщику - то товар дб в Товары - а не в Отмененные
	//	Если НЕ ИмяПрайса = "<< не определен >>" тогда
	//		имяТЧ = "Товары";
	//	КонецЕсли;	
	//иначе	
	//	Если ПроцентНаценкиПоСхемеНастойки <= ПроцентНаценкиПоТекущимЦенамЗагрузки тогда
	//		имяТЧ = "Товары";
	//	иначе	
	//		имяТЧ = "ТоварыОтмененные";
	//	конецесли;
	//	
	//	Если ИНФ_Поставщик <> Справочники.Инф_Поставщик.ПустаяСсылка() тогда
	//		Если сокрлп(имяТЧ) <> "ТоварыОтмененные" тогда
	//			Если не ИНФ_Поставщик.Активный тогда
	//				имяТЧ = "ТоварыОтмененные";
	//			конецесли;		
	//		конецесли;		
	//	конецесли;	
	//конецесли;
	//
	//НстрТЧ = ТЗ_РазобраноПоПоставщикам.Добавить();
	//НстрТЧ.Номенклатура			= "";
	//НстрТЧ.ИНФ_ПроцентНаценки	= ПроцентНаценкиПоТекущимЦенамЗагрузки;
	//
	//КРаспределению = СтрТ.Количество - СтрТ.Распределено;
	//ОстатокПоПрайсуПоставщика = Остаток; 
	//
	//Если КРаспределению <= ОстатокПоПрайсуПоставщика Тогда
	//	НстрТЧ.Количество		= КРаспределению;
	//	СтрТ.Распределено		= СтрТ.Распределено + КРаспределению;
	//Иначе
	//	НстрТЧ.Количество		= ОстатокПоПрайсуПоставщика;
	//	СтрТ.Распределено		= СтрТ.Распределено + ОстатокПоПрайсуПоставщика;
	//КонецЕсли;
	//
	//Если НЕ СтрокиПроценки.Количество() = 0 тогда
	//	СтрокиПроценки[0].Остаток = СтрокиПроценки[0].Остаток - НстрТЧ.Количество;
	//КонецЕсли;
	
	//НстрТЧ.ИмяТЧ				= ИмяТЧ;
	//НстрТЧ.ИНФ_ЗакупочнаяЦена	= ИНФ_ЗакупочнаяЦена;
	//НстрТЧ.ИНФ_Поставщик		= ИНФ_Поставщик;
	//НстрТЧ.Бренд				= Бренд;
	//НстрТЧ.Номер				= Номер;
	//НстрТЧ.Цена					= СтрТ.Цена;
	//НстрТЧ.Прайс				= ИмяПрайса;
	//НстрТЧ.ИДСтроки				= СтрТ.ИДСтроки;
	//НстрТЧ.ИДСтрокиПроценка		= СтрТ.ИДСтрокиПроценка;
	//НстрТЧ.Сумма				= НстрТЧ.Цена * НстрТЧ.Количество;
	//	
	//НстрТЧ.APIПоставщик 			= _APIПоставщик;
	//НстрТЧ.APIНаименованиеПрайса	= _APIНаименованиеПрайса;
	//НстрТЧ.ApiБренд					= _ApiБренд;
	//
	//Если НстрТЧ.ИмяТЧ = "Заказ принят" тогда
	//	ИтогКоличествоРаспределено = ИтогКоличествоРаспределено +НстрТЧ.Количество;
	//	ИтогСуммаРаспределено = ИтогСуммаРаспределено + НстрТЧ.Сумма;
	//конецесли;	
	
	//конеццикла;	
	
	Элементыформы.ТЗ_РазобраноПоПоставщикам.СоздатьКолонки();
	//Элементыформы.ТЗ_РазобраноПоПоставщикам.Колонки.ИНФ_Поставщик.Ширина = 2;
	//Элементыформы.ТЗ_РазобраноПоПоставщикам.Колонки.ИДСтроки.Ширина = 5;
	
	Элементыформы.ТЗ_РазобраноПоПоставщикам.Подвал = Истина;
	Элементыформы.ТЗ_РазобраноПоПоставщикам.Колонки.Количество.ТекстПодвала = ИтогКоличествоРаспределено;
	Элементыформы.ТЗ_РазобраноПоПоставщикам.Колонки.Количество.ШрифтПодвала =  Новый Шрифт(,,Истина);
	Элементыформы.ТЗ_РазобраноПоПоставщикам.Колонки.Количество.ГоризонтальноеПоложениеВПодвале =   ГоризонтальноеПоложение.Право;
	
	Элементыформы.ТЗ_РазобраноПоПоставщикам.Колонки.Сумма.ТекстПодвала = ИтогСуммаРаспределено;
	Элементыформы.ТЗ_РазобраноПоПоставщикам.Колонки.Сумма.ШрифтПодвала =  Новый Шрифт(,,Истина);
	Элементыформы.ТЗ_РазобраноПоПоставщикам.Колонки.Сумма.ГоризонтальноеПоложениеВПодвале =   ГоризонтальноеПоложение.Право;
	
	ЗаполнитьИтоговыеСуммыПоПоставщикам();
	
	СписокКолонок = Новый СписокЗначений;
	СписокКолонок.Добавить("Номенклатура");
	СписокКолонок.Добавить("ИДСтроки");
	СписокКолонок.Добавить("ИДСтрокиПроценка");
	СписокКолонок.Добавить("ApiБренд");
	СписокКолонок.Добавить("APIНаименованиеПрайса");
	
	УправлениеВидимостьюКолонок("ТЗ_РазобраноПоПоставщикам", СписокКолонок, Ложь);
	УправлениеДоступностьюКолонок("ТЗ_РазобраноПоПоставщикам", Истина);
	
	//Элементыформы.ТЗ_.Колонки.Распределено.ТекстПодвала = ТЗ_.Итог("Распределено");
	//Элементыформы.ТЗ_.Колонки.Распределено.ШрифтПодвала =  Новый Шрифт(,,Истина);
	//Элементыформы.ТЗ_.Колонки.Распределено.ГоризонтальноеПоложениеВПодвале =   ГоризонтальноеПоложение.Право;
	
конецпроцедуры			


Процедура КоманднаяПанель1Действие(Кнопка)
	ТЗ_Настройка_ПрайсыПоставщиков_УставноитьФлаг(Истина);
КонецПроцедуры


Процедура КоманднаяПанель1Действие1(Кнопка)
	ТЗ_Настройка_ПрайсыПоставщиков_УставноитьФлаг(Ложь);
КонецПроцедуры


Процедура КоманднаяПанель2Действие(Кнопка)
	// Вставить содержимое обработчика.
	ТЗ_Настройка_ПрайсыПоставщиковЛокальные_УставноитьФлаг(Истина);
КонецПроцедуры

Процедура КоманднаяПанель2Действие1(Кнопка)
	// Вставить содержимое обработчика.
	ТЗ_Настройка_ПрайсыПоставщиковЛокальные_УставноитьФлаг(Ложь);
	
КонецПроцедуры


Процедура ТЗ_Настройка_ПрайсыПоставщиков_УставноитьФлаг(ПРМ)
	для каждого Элт из ТЗ_Настройка_ПрайсыПоставщиков цикл
		Элт.выбран = ПРМ;
	конеццикла;	
конецпроцедуры	

Процедура ТЗ_Настройка_ПрайсыПоставщиковЛокальные_УставноитьФлаг (ПРМ)
	для каждого Элт из ТЗ_Настройка_ПрайсыПоставщиковЛокальные цикл
		Элт.выбран = ПРМ;
	конеццикла;	
	
конецпроцедуры


Процедура ТЗ_Настройка_ПрайсыПоставщиковПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	// ОформлениеСтроки.Ячейки.выбран.ОтображатьКартинку = Истина;
	ОформлениеСтроки.Ячейки.выбран1.ОтображатьТекст = ложь;
	ОформлениеСтроки.Ячейки.выбран1.ОтображатьФлажок = истина;
	Если ДанныеСтроки.выбран Тогда
		//	ОформлениеСтроки.Ячейки.выбран.Картинка = библиотекакартинок.УстановленаПометка;
	иначе
		//	ОформлениеСтроки.Ячейки.выбран.Картинка = библиотекакартинок.СнятаПометка;
	конецесли;	
	
	
КонецПроцедуры

Процедура ТЗ_Настройка_ПрайсыПоставщиковВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	ВыбраннаяСтрока.выбран = не  ВыбраннаяСтрока.выбран;
КонецПроцедуры

Процедура ТЗ_Настройка_ПрайсыПоставщиковЛокальныеПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	ОформлениеСтроки.Ячейки.выбран1.ОтображатьТекст = ложь;
	ОформлениеСтроки.Ячейки.выбран1.ОтображатьФлажок = истина;
	
КонецПроцедуры

Процедура ТЗ_Настройка_ПрайсыПоставщиковЛокальныеВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	ВыбраннаяСтрока.выбран = не  ВыбраннаяСтрока.выбран;
	
КонецПроцедуры

Процедура КоманднаяПанель4Действие(Кнопка)
	ТекСтр = элементыформы.ТЗ_СозданныеПроценкиПоПоставщикам.ТекущаяСтрока;
	Если  ТекСтр<> Неопределено тогда
		Проценка_Ссылка =  ТекСтр.ПроценкаСсылка;
		ПараметрыФормы = Новый Структура("Ключ", Проценка_Ссылка);
		ОткрытьФорму("Справочник.ИНФ_API_Проценки.ФормаОбъекта", ПараметрыФормы);
		
	конецесли;	
КонецПроцедуры

Процедура ТЗ_РазобраноПоПоставщикамПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	попытка
		Если  Элементыформы.ТЗ_.ТекущаяСтрока.ИДСтроки =   ДанныеСтроки.ИДСтроки тогда
			ОформлениеСтроки.Цветфона = ИНФ_КлиентСервер.ЦветБледноКраный();
		конецесли;	
	исключение
		
	конецпопытки;
	
	
КонецПроцедуры

Процедура ТЗ_ПриАктивизацииСтроки()
	
	Элементыформы.ТЗ_РазобраноПоПоставщикам.ОбновитьСтроки(); //Элемент.ТекущаяСтрока.Номер
	
	Отбор = Новый Структура();
	Отбор.Вставить("partnumber", ЭлементыФормы.ТЗ_.ТекущаяСтрока.Номер);
	ТЗ_ДанныеПроценкиОтбор = ТЗ_ДанныеПроценки.Скопировать(Отбор);
	
	Если НЕ ТЗ_РазобраноПоПоставщикам.Количество() = 0 Тогда
		Отбор2 = Новый Структура();
		//Отбор2.Вставить("Номер", Элемент.ТекущаяСтрока.Номер);
		Отбор2.Вставить("ИДСтроки", ЭлементыФормы.ТЗ_.ТекущаяСтрока.ИДСтроки);
		ТЗ_РазобраноПоПоставщикам_Отбор = ТЗ_РазобраноПоПоставщикам.Скопировать(Отбор2);
		Элементыформы.ТЗ_РазобраноПоПоставщикам_Отбор.СоздатьКолонки();
		
		СписокКолонок = Новый СписокЗначений;
		СписокКолонок.Добавить("Номенклатура");
		СписокКолонок.Добавить("ИДСтроки");
		СписокКолонок.Добавить("ИДСтрокиПроценка");
		СписокКолонок.Добавить("ApiБренд");
		СписокКолонок.Добавить("APIНаименованиеПрайса");
		УправлениеВидимостьюКолонок("ТЗ_РазобраноПоПоставщикам_Отбор", СписокКолонок, Ложь);

	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИтоговыеСуммыПоПоставщикам()
	
	Отб_ор = Новый Структура();
	Отб_ор .Вставить("ИмяТЧ", "Заказ принят");
	мСтро_ки = ТЗ_РазобраноПоПоставщикам.НайтиСтроки(Отб_ор);
	
	ПРМ_ТЗ_РазобраноПоПоставщикам.Очистить();
	
	для каждого Стр_м из мСтро_ки  цикл
		Нстр_ТЧ					= ПРМ_ТЗ_РазобраноПоПоставщикам.Добавить();	
		Нстр_ТЧ.Сумма_1			= Стр_м.НашаЦена * Стр_м.Количество;
		ЗаполнитьЗначенияСвойств(Нстр_ТЧ, Стр_м);
		//Нстр_ТЧ.ИНФ_Поставщик	= Стр_м.APIПоставщик.Инф_Поставщик;
	конеццикла;	
	
	//ПРМ_ТЗ_РазобраноПоПоставщикам.Свернуть("ИНФ_Поставщик, APIПоставщик, APIНаименованиеПрайса","Сумма");
	ПРМ_ТЗ_РазобраноПоПоставщикам.Свернуть("ИНФ_Поставщик, APIПоставщик", "Сумма, Сумма_1");
	ПРМ_ТЗ_РазобраноПоПоставщикам.Сортировать("APIПоставщик Возр, Сумма Убыв");
	
конецпроцедуры

Процедура Надпись3Нажатие()
	
	ЗаполнитьИтоговыеСуммыПоПоставщикам();
	
КонецПроцедуры

Процедура КоманднаяПанель4Действие1(Кнопка)
	#Если Клиент Тогда 
		
		Текс_т ="";
		для каждого СтрТ из ТЗ_СозданныеПроценкиПоПоставщикам цикл
			Текс_т = Текс_т+Символы.ПС+ сокрлп(СтрТ.Поставщик)+ " - " + сокрлп(СтрТ.IDПроценки)+ " - " + сокрлп(СтрТ.Статус);
		конеццикла;	
		
		Объект = Новый COMОбъект("htmlfile");
		Объект.ParentWindow.ClipboardData.Setdata("Text", Текс_т );
		сообщить ("Сформировано. Теперь в телеграмме - Ctrl+V");
		
	#КонецЕсли 
	
КонецПроцедуры

Процедура кнСоздатьЗаказКлиентаНажатие(Элемент)
	
	ВосстановитьТЗ_РазобраноПоПоставщикам();
	
	Если ТЗ_РазобраноПоПоставщикам.Количество()=0 тогда
		Предупреждение("Нет данных для загрузки. Необходимо проценить");
	Иначе
		Если Вопрос("Загрузить в Универсальный заказ?", РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да тогда
			
			Для каждого СтрЗаказ Из ТабЗаказы Цикл
				
				////Док = Элементыформы.ЗаказПокупателя.Значение.ПолучитьОбъект();
				//Док = СтрЗаказ.ЗаказПокупателя.ПолучитьОбъект();
				
				ДокЗК = СтрЗаказ.ЗаказПокупателя.ПолучитьОбъект();
				ДокЗК.ИНФ_ВидЗаказа = Перечисления.ИНФ_ВидЗаказа.ТолькоЗаказУПоставщика;
				ДокЗК.Записать();
				
				ВалютаUSD 		= Справочники.Валюты.НайтиПоКоду("840");
				КурсВалютыUSD	= ПолучитьКурсВалюты(ВалютаUSD, ДокЗК.Дата);
				
				Если ЗначениеЗаполнено(СтрЗаказ.ЗаказУниверсальный) Тогда
					Док = СтрЗаказ.ЗаказУниверсальный.ПолучитьОбъект();	
				Иначе
				    Док = Документы.ЗаказУниверсальный.СоздатьДокумент();
					Док.ЗаказПокупателя = СтрЗаказ.ЗаказПокупателя;
					Док.Дата = ТекущаяДата();
					
					Сообщить("Создан УЗ: " + Строка(Док.Номер));
					//СтрЗаказ.ЗаказУниверсальный = Док.Ссылка;
				КонецЕсли;
				
				//Док.ИНФ_ВидЗаказа = Перечисления.ИНФ_ВидЗаказа.ТолькоЗаказУПоставщика;
				
				Док.Товары.Очистить();
				Док.Записать();
				//Док.УдалитьТоварыОтмененные.Очистить();
				//Док.дата = текущаядата();
				//Док.ВалютаДокумента = константы.ВалютаУправленческогоУчета.Получить();
				//Док.КурсВзаиморасчетов=1;
				//Док.КратностьВзаиморасчетов=1;
				//Док.Ответственный = параметрысеанса.ТекущийПользователь;
				
				//СкладГруппа = справочники.Склады.НайтиПоКоду("000000001");
				
				//Док.Контрагент = ВывбКонтрагент;
				//Док.ДоговорКонтрагента = Док.Контрагент .ОсновнойДоговорКонтрагента;
				//Док.Организация = Док.ДоговорКонтрагента.Организация;
				
				Отбор = Новый Структура;
				Отбор.Вставить("ЗаказПокупателя", СтрЗаказ.ЗаказПокупателя);
				ТЗ_РазобраноПоПоставщикамОтбор = ТЗ_РазобраноПоПоставщикам.НайтиСтроки(Отбор);
				
			    НаборЗаписей = РегистрыСведений.ИНФ_ЗаказУниверсальный.СоздатьНаборЗаписей();
    			НаборЗаписей.Отбор.ЗаказУниверсальный.Установить(Док.ссылка);    
				
				//ТЗДанныеРегистраОтказные = ПолучитьДанныеДляАрхива(Док.ЗаказПокупателя);
				//Для каждого СтрДанныеРегистраОтказные Из ТЗДанныеРегистраОтказные Цикл
				//	Запись = НаборЗаписей.Добавить();
				//	ЗаполнитьЗначенияСвойств(Запись, СтрДанныеРегистраОтказные);
				//	Запись.ИдСтроки_2	= "архив";
				//КонецЦикла;
				
				ТЗДанныеРегистраВОбработке = ПолучитьДанныеВОбработке(Док.ЗаказПокупателя);
				Для каждого СтрДанныеРегистраВОбработке Из ТЗДанныеРегистраВОбработке Цикл
					Запись = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(Запись, СтрДанныеРегистраВОбработке);
					
					стрТЧ = Док.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(стрТЧ, СтрДанныеРегистраВОбработке);
				КонецЦикла;

				Для каждого СтрТ из ТЗ_РазобраноПоПоставщикамОтбор цикл
					
					Если НЕ СтрТ.имяТЧ = "Заказ принят" Тогда Продолжить КонецЕсли;
					
					Запись = НаборЗаписей.Добавить();
					
					////имяТЧ = ?(СтрТ.имяТЧ = "Заказ принят", "Товары", "ТоварыОтмененные");
					//Если СтрТ.имяТЧ = "Заказ принят" ИЛИ СтрТ.имяТЧ = "Проценка" Тогда
					//	имяТЧ = "Товары";
					//Иначе
					//	имяТЧ = "УдалитьТоварыОтмененные"
					//КонецЕсли;
					имяТЧ = "Товары";
					
					НстрТЧ = Док[имяТЧ].Добавить();
					
					//ЗаполнитьЗначенияСвойств(НстрТЧ, СтрТ);
					
					Если СтрТ.имяТЧ = "Заказ принят" Тогда
						//НстрТЧ.ИНФ_Статус = ?(СтрТ.имяТЧ = "Товары", Перечисления.ИНФ_СостоянияПозицийЗаказаКлиента.ЗаказПринят, Перечисления.ИНФ_СостоянияПозицийЗаказаКлиента.ОтказНаш);
						НстрТЧ.ИНФ_Статус = Перечисления.ИНФ_СостоянияПозицийЗаказаКлиента.ВРаботе;
						Запись.ИНФ_Статус = Перечисления.ИНФ_СостоянияПозицийЗаказаКлиента.ВРаботе;
					ИначеЕсли СтрТ.имяТЧ = "Отказ наш" ИЛИ СтрТ.имяТЧ = "Распределен полностью" ИЛИ СтрТ.имяТЧ = "Отсутствует в прайсах" Тогда                                                           
						НстрТЧ.ИНФ_Статус = Перечисления.ИНФ_СостоянияПозицийЗаказаКлиента.ОтказПоставщика;
						Запись.ИНФ_Статус = Перечисления.ИНФ_СостоянияПозицийЗаказаКлиента.ОтказПоставщика;
					ИначеЕсли СтрТ.имяТЧ = "Проценка" Тогда                                                           
						НстрТЧ.ИНФ_Статус = Перечисления.ИНФ_СостоянияПозицийЗаказаКлиента.Проценка;
						Запись.ИНФ_Статус = Перечисления.ИНФ_СостоянияПозицийЗаказаКлиента.Проценка;
					Иначе
						НстрТЧ.ИНФ_Статус = Перечисления.ИНФ_СостоянияПозицийЗаказаКлиента.ОтказКлиента;
						Запись.ИНФ_Статус = Перечисления.ИНФ_СостоянияПозицийЗаказаКлиента.ОтказКлиента;
					КонецЕсли;	
					
					Номенклатура = ОП_ОбщегоНазначения.НайтиСоздатьНоменклатуру(СтрТ.Бренд,СтрТ.Номер,Неопределено);
					
					НстрТЧ.Номенклатура				= Номенклатура;
					НстрТЧ.ИНФ_ПроцентНаценки		= СтрТ.ИНФ_ПроцентНаценки; 
					НстрТЧ.ЕдиницаИзмерения			= НстрТЧ.Номенклатура.ЕдиницаХраненияОстатков;
					НстрТЧ.Количество				= ?(НстрТЧ.ИНФ_Статус = Перечисления.ИНФ_СостоянияПозицийЗаказаКлиента.ВРаботе, СтрТ.Количество, 0);
					НстрТЧ.Цена						= СтрТ.Цена;
					НстрТЧ.Коэффициент				= 1;
					НстрТЧ.СтавкаНДС				= НстрТЧ.Номенклатура.СтавкаНДС;
					НстрТЧ.ИНФ_ЗакупочнаяЦена		= СтрТ.ИНФ_ЗакупочнаяЦена;
					НстрТЧ.ИНФ_Поставщик			= СтрТ.ИНФ_Поставщик;
					НстрТЧ.ИНФ_КоличествоКлиента	= СтрТ.ИНФ_КоличествоКлиента;
					НстрТЧ.Валюта					= СтрТ.Валюта;
					НстрТЧ.ЦенаДоставки				= СтрТ.ЦенаДоставки;
					НстрТЧ.ЦенаДоставки_2			= СтрТ.ЦенаДоставки_2;
					
					НстрТЧ.APIПоставщик 			= СтрТ.APIПоставщик;
					НстрТЧ.APIНаименованиеПрайса	= СтрТ.APIНаименованиеПрайса;
					НстрТЧ.ApiБренд					= СтрТ.ApiБренд;
					
					НстрТЧ.ИДСтроки_2				= СтрТ.ИДСтроки;
					НайденнаяСтрока = СтрЗаказ.ЗаказПокупателя.Товары.Найти(СтрТ.ИДСтроки);
					Если НЕ НайденнаяСтрока = Неопределено Тогда
						НстрТЧ.ИДСтроки		= НайденнаяСтрока.ИДСтроки;
					КонецЕсли; 
					
					Если СтрТ.ИНФ_КоличествоКлиента > СтрТ.Количество И СтрТ.Количество > 0 Тогда //Не хватило остатка у поставщика
						НстрТЧ.ИНФ_КоличествоКлиента = СтрТ.Количество;	// одна из подстрок распределения
						
						//НстрТЧДоб = Док[имяТЧ].Добавить();
						//ЗаполнитьЗначенияСвойств(НстрТЧДоб, НстрТЧ);
						//НстрТЧДоб.ИНФ_Статус = Перечисления.ИНФ_СостоянияПозицийЗаказаКлиента.ОтказПоставщика;
						//НстрТЧДоб.ИНФ_КоличествоКлиента = СтрТ.ИНФ_КоличествоКлиента - СтрТ.Количество;
						//НстрТЧДоб.Количество 			= 0;
						//НстрТЧДоб.ИНФ_ЗакупочнаяЦена	= 0;
						//НстрТЧДоб.ИНФ_ПроцентНаценки	= 0;
						//НстрТЧДоб.APIПоставщик 			= "";
						//НстрТЧДоб.APIНаименованиеПрайса	= "";
						//НстрТЧДоб.ApiБренд				= "";
						//НстрТЧДоб.Валюта				= "";
						//НстрТЧДоб.ЦенаДоставки			= 0;
						//НстрТЧДоб.ЦенаДоставки_2		= 0;
					КонецЕсли;	
					
					//НстрТЧ.ИДСтрокиПроценка			= СтрТ.ИДСтрокиПроценка;
					
					ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НстрТЧ, Док);
					ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НстрТЧ, Док);
					ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НстрТЧ, Док);
					
					//************************************
					
					Запись.ИД						= Новый УникальныйИдентификатор;
					Запись.ЗаказПокупателя          = СтрЗаказ.ЗаказПокупателя;
					Запись.ЗаказУниверсальный		= Док.Ссылка;
					
					Запись.Наименование_Рус			= СтрТ.name_ru;
					Запись.Наименование_Англ		= СтрТ.name_en;
					Запись.Вес						= СтрТ.Вес;
					Запись.Объем					= СтрТ.Объем;
					
					Запись.Номенклатура				= Номенклатура;
					Запись.ИНФ_ПроцентНаценки		= СтрТ.ИНФ_ПроцентНаценки; 
					Запись.ЕдиницаИзмерения			= Запись.Номенклатура.ЕдиницаХраненияОстатков;
					Запись.Количество				= ?(Запись.ИНФ_Статус = Перечисления.ИНФ_СостоянияПозицийЗаказаКлиента.ВРаботе, СтрТ.Количество, 0);
					Запись.Цена						= СтрТ.Цена;
					Запись.Коэффициент				= 1;
					Запись.СтавкаНДС				= Запись.Номенклатура.СтавкаНДС;
					Запись.ИНФ_ЗакупочнаяЦена		= СтрТ.ИНФ_ЗакупочнаяЦена;
					Запись.ИНФ_Поставщик			= СтрТ.ИНФ_Поставщик;
					Запись.ИНФ_КоличествоКлиента	= СтрТ.ИНФ_КоличествоКлиента;
					Запись.Валюта					= СтрТ.Валюта;
					Запись.ЦенаДоставки				= СтрТ.ЦенаДоставки;
					Запись.ЦенаДоставки_2			= СтрТ.ЦенаДоставки_2;
					Запись.ЦенаДоставки_3			= ?(КурсВалютыUSD=0,0,СтрТ.ЦенаДоставки_2/КурсВалютыUSD);
					
					Запись.APIПоставщик 			= СтрТ.APIПоставщик;
					Запись.APIНаименованиеПрайса	= СтрТ.APIНаименованиеПрайса;
					Запись.ApiБренд					= СтрТ.ApiБренд;
					
					Запись.ИДСтроки_2				= СтрТ.ИДСтроки;
					
					НайденнаяСтрока = СтрЗаказ.ЗаказПокупателя.Товары.Найти(СтрТ.ИДСтроки);
					Если НЕ НайденнаяСтрока = Неопределено Тогда
						Запись.ИДСтроки				= НайденнаяСтрока.ИДСтроки;
					КонецЕсли; 
					
					Запись.Сумма					= Запись.Цена * Запись.Количество;
					Запись.API_Номер				= СтрТ.Номер;
					
					Если НЕ Запись.ИНФ_Статус = Перечисления.ИНФ_СостоянияПозицийЗаказаКлиента.ВРаботе Тогда   //очищаем данные для отказных
						НстрТЧ.ИНФ_ЗакупочнаяЦена		= 0;
						НстрТЧ.ИНФ_ПроцентНаценки		= 0;
						НстрТЧ.APIПоставщик 			= "";
						НстрТЧ.APIНаименованиеПрайса	= "";
						НстрТЧ.ApiБренд					= "";
						НстрТЧ.Валюта					= "";
						НстрТЧ.ЦенаДоставки				= 0;
						НстрТЧ.ЦенаДоставки_2			= 0;
						
						Запись.ИНФ_ЗакупочнаяЦена		= 0;
						Запись.ИНФ_ПроцентНаценки		= 0;
						Запись.APIПоставщик 			= "";
						Запись.APIНаименованиеПрайса	= "";
						Запись.ApiБренд					= "";
						Запись.Валюта					= "";
						Запись.ЦенаДоставки				= 0;
						Запись.ЦенаДоставки_2			= 0;
						Запись.ЦенаДоставки_3			= 0;
					КонецЕсли;
					
					Если СтрТ.ИНФ_КоличествоКлиента > СтрТ.Количество И СтрТ.Количество > 0 Тогда //Не хватило остатка у поставщика
						Запись.ИНФ_КоличествоКлиента = СтрТ.Количество;	// одна из подстрок распределения одной позиции
						
						//ЗаписьДоб = НаборЗаписей.Добавить();
						//ЗаполнитьЗначенияСвойств(ЗаписьДоб, Запись);
						//ЗаписьДоб.ИД					= Новый УникальныйИдентификатор;	
						//ЗаписьДоб.ИНФ_Статус			= Перечисления.ИНФ_СостоянияПозицийЗаказаКлиента.ОтказПоставщика;
						//ЗаписьДоб.ИНФ_КоличествоКлиента = СтрТ.ИНФ_КоличествоКлиента - СтрТ.Количество;
						//ЗаписьДоб.Количество 			= 0;
						//ЗаписьДоб.Сумма 				= 0;
						//ЗаписьДоб.ИНФ_ЗакупочнаяЦена	= 0;
						//ЗаписьДоб.ИНФ_ПроцентНаценки	= 0;
						//ЗаписьДоб.APIПоставщик 			= "";
						//ЗаписьДоб.APIНаименованиеПрайса	= "";
						//ЗаписьДоб.ApiБренд				= "";
						//ЗаписьДоб.Валюта				= "";
						//ЗаписьДоб.ЦенаДоставки			= 0;
						//ЗаписьДоб.ЦенаДоставки_2		= 0;

					КонецЕсли;	

				КонецЦикла;
				
				НаборЗаписей.Записать(Истина);
				Док.Записать();
				
				ФормаЗаказа = Док.ПолучитьФорму();
				ФормаЗаказа.ТолькоПросмотр = Истина;
				ФормаЗаказа.Открыть();
				//ФормаЗаказа.Модифицированность = Истина;
			КонецЦикла;
			
			ЭтаФорма.Закрыть();
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанель4НайтиПроценки()
	
	Отбор= Новый Структура();
	Отбор.Вставить("Выбран", Истина);
	мСтроки = ТЗ_Настройка_ПрайсыПоставщиков.НайтиСтроки(Отбор);
	
	МассивПрайсов = Новый Массив();
	Для каждого СтрТм Из мСтроки Цикл
		МассивПрайсов.Добавить(СтрТм.ПрайсПоставщика);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИНФ_API_Проценки.Поставщик,
	|	ИНФ_API_Проценки.ID КАК IDПроценки,
	|	ИНФ_API_Проценки.Ссылка КАК ПроценкаСсылка,
	|	ИНФ_API_Проценки.Статус,
	|	ВЫБОР
	|		КОГДА ИНФ_API_Проценки.Статус = ""OK""
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Отработана,
	|	ВЫБОР
	|		КОГДА ИНФ_API_Проценки.Статус = ""FAIL""
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОтработанаCОшибками,
	|	ВЫБОР
	|		КОГДА ИНФ_API_Проценки.Статус = ""OK""
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Загружено,
	|	ИНФ_API_Проценки.ДатаСоздания,
	|	ИНФ_API_Проценки.ДатаОбновления
	|ИЗ
	|	Справочник.ИНФ_API_Проценки КАК ИНФ_API_Проценки
	|ГДЕ
	|	ИНФ_API_Проценки.ПометкаУдаления = ЛОЖЬ
	|	И ИНФ_API_Проценки.ЗаказыПокупателя.ЗаказПокупателя В(&ЗаказПокупателя)
	|	И ИНФ_API_Проценки.Прайсы.Прайс В(&Прайс)";
	
	Запрос.Параметры.Вставить("ЗаказПокупателя", 	ТабЗаказы.ВыгрузитьКолонку("ЗаказПокупателя"));
	Запрос.Параметры.Вставить("Прайс", 				МассивПрайсов);
		
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Элементыформы.ТЗ_СозданныеПроценкиПоПоставщикам.Значение = Результат.Выгрузить();
		Элементыформы.ТЗ_СозданныеПроценкиПоПоставщикам.СоздатьКолонки();
	КонецЕсли;	
	
	ВалютаР	= Константы.ВалютаРегламентированногоУчета.Получить();
	
	Для каждого СтрПроценка Из ТЗ_СозданныеПроценкиПоПоставщикам Цикл
		ПроценкаСсылка = СтрПроценка.ПроценкаСсылка;
		Если ПроценкаСсылка.Статус = "OK" Тогда   			
			Для каждого СтрРезПроц Из ПроценкаСсылка.РезультатПроценки Цикл
				Если МассивПрайсов.Найти(СтрРезПроц.прайс) = Неопределено Тогда Продолжить КонецЕсли; 
				НстрТЧ = ТЗ_ДанныеПроценки.Добавить();	    
				ЗаполнитьЗначенияСвойств(НстрТЧ, СтрРезПроц);
				//НстрТЧ.Brand						= СтрРезПроц.brand_name;
				НстрТЧ.Brand						= СтрРезПроц.brand;
				НстрТЧ.price_list					= СтрРезПроц.прайс;
				НстрТЧ.name_ru						= СтрРезПроц.НаименованиеРус;
				НстрТЧ.name_en						= СтрРезПроц.НаименованиеАнгл;
				НстрТЧ.weight						= СтрРезПроц.weight;
				НстрТЧ.volume						= СтрРезПроц.volume;
				НстрТЧ.Остаток						= СтрРезПроц.quantity;
				НстрТЧ.ПоставщикКонтрагент	 		= СтрПроценка.Поставщик.Контрагент;
				НстрТЧ.ИНФ_API_Поставщики_suppliers	= СтрПроценка.Поставщик;
				НстрТЧ.БрендСсылка					= СтрРезПроц.Бренд;
				
				//НстрТЧ.Валюта						= ?(ЗначениеЗаполнено(СтрПроценка.Поставщик.Валюта), СтрПроценка.Поставщик.Валюта, СтрПроценка.Поставщик.ДоговорКонтрагента.ВалютаВзаиморасчетов);
				
				КурсПоставщика = ?(СтрПроценка.Поставщик.Валюта = ВалютаР, 1, СтрПроценка.Поставщик.КурсВалюты);
				НстрТЧ.Валюта						= СтрПроценка.Поставщик.Валюта;
				НстрТЧ.Курс							= СтрПроценка.Поставщик.КурсВалюты;
				НстрТЧ.price_2						= НстрТЧ.price*КурсПоставщика;
					
				//НстрТЧ.Валюта						= СтрПроценка.Поставщик.Валюта;
				//НстрТЧ.Курс						= СтрПроценка.Поставщик.КурсВалюты;
				//НстрТЧ.price_2					= НстрТЧ.price*НстрТЧ.Курс;
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла; 
	
	ТЗ_ДанныеПроценки.Свернуть("brand, delivery_days, delivery_type, name_en, name_ru, packing, partnumber, Валюта, Курс, price, price_2, price_list, quantity, Остаток, reference, weight, volume, ПоставщикКонтрагент, ИНФ_API_Поставщики_suppliers, БрендСсылка, delivery_days_min, delivery_days_max, brand_name", "");
	ТЗ_ДанныеПроценки.Сортировать("partnumber возр, price_2 возр, delivery_days_min возр");
	
	//ОбновитьСтатусПроценки();
	
КонецПроцедуры

Функция ПроверитьСоставПрайсов()
	
	ДобавленНовыйПрайс = Ложь;
	
	Если НЕ ТЗ_СозданныеПроценкиПоПоставщикам.Количество() = 0 Тогда
		Для каждого СтрокаНастройкаПрайсов Из ТЗ_Настройка_ПрайсыПоставщиков Цикл
			Если НЕ СтрокаНастройкаПрайсов.Выбран Тогда Продолжить КонецЕсли;
			Если ТЗ_СозданныеПроценкиПоПоставщикам.Найти(СтрокаНастройкаПрайсов.Поставщик) = Неопределено Тогда
				Сообщить("Выбраны новые прайсы, проценки формируются заново.");
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;                                                     
	КонецЕсли;
	
	ПарамОтбора = Новый Структура("Выбран, Поставщик");
 	ПарамОтбора.Вставить("Выбран", Истина);
	
	Для каждого СтрПроценка Из ТЗ_СозданныеПроценкиПоПоставщикам Цикл
		
		ПарамОтбора.Вставить("Поставщик", СтрПроценка.Поставщик);
		
		ВыбранныеПрайсыПоставщика = ТЗ_Настройка_ПрайсыПоставщиков.НайтиСтроки(ПарамОтбора);		
		
		Для каждого СтрВыбранныйПрайс Из ВыбранныеПрайсыПоставщика Цикл
			
			НайденнаяСтрока = СтрПроценка.ПроценкаСсылка.Прайсы.Найти(СтрВыбранныйПрайс.ПрайсПоставщика, "Прайс");
			
			Если НайденнаяСтрока = Неопределено Тогда
				ДобавленНовыйПрайс = Истина;
				Сообщить("Выбраны новые прайсы, проценки формируются заново.");
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ДобавленНовыйПрайс Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат ДобавленНовыйПрайс; 
	
КонецФункции

Функция ПроверитьСоставНоменклатуры()

	ДобавленаНоменклатура = Ложь;
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	ИНФ_API_ПроценкиТовары.partnumber КАК Номер,
	//|	ИНФ_API_ПроценкиТовары.Бренд КАК Бренд
	//|ИЗ
	//|	Справочник.ИНФ_API_Проценки.Товары КАК ИНФ_API_ПроценкиТовары
	//|ГДЕ
	//|	ИНФ_API_ПроценкиТовары.Ссылка.ЗаказПокупателя = &ЗаказПокупателя
	//|	И ИНФ_API_ПроценкиТовары.Ссылка.ПометкаУдаления = ЛОЖЬ";
	//
	//Запрос.Параметры.Вставить("ЗаказПокупателя", Элементыформы.ЗаказПокупателя.Значение);
	//
	//Результат = Запрос.Выполнить().Выгрузить();
	//
	//Отбор = Новый Структура;
	//Для каждого СтрТЗ Из ТЗ_ Цикл
	//	Отбор.Вставить("Бренд", СтрТЗ.Бренд);
	//	Отбор.Вставить("Номер", СтрТЗ.Номер);
	//	НоменклатураПроценки = Результат.НайтиСтроки(Отбор);
	//	Если НоменклатураПроценки.Количество() = 0 Тогда 
	//		ДобавленаНоменклатура = Истина;
	//		Прервать;
	//	КонецЕсли;
	//КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ИНФ_API_ПроценкиТовары.partnumber КАК СТРОКА(30)) КАК Номер,
		|	ВЫРАЗИТЬ(ИНФ_API_ПроценкиТовары.Бренд КАК СТРОКА(30)) КАК Бренд
		|ПОМЕСТИТЬ ВТ_НомПроценки
		|ИЗ
		|	Справочник.ИНФ_API_Проценки.Товары КАК ИНФ_API_ПроценкиТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИНФ_API_Проценки КАК ИНФ_API_Проценки
		|		ПО ИНФ_API_ПроценкиТовары.Ссылка = ИНФ_API_Проценки.Ссылка
		|ГДЕ
		|	ИНФ_API_ПроценкиТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И ИНФ_API_Проценки.ЗаказыПокупателя.ЗаказПокупателя В(&ЗаказПокупателя)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказПокупателяТовары.Номенклатура.Артикул,
		|	ЗаказПокупателяТовары.Номенклатура.ИНФ_Бренд,
		|	ВТ_НомПроценки.Номер,
		|	ВТ_НомПроценки.Бренд
		|ИЗ
		|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НомПроценки КАК ВТ_НомПроценки
		|		ПО ЗаказПокупателяТовары.Номенклатура.Артикул = ВТ_НомПроценки.Номер
		|			И ЗаказПокупателяТовары.Номенклатура.ИНФ_Бренд.Наименование = ВТ_НомПроценки.Бренд
		|ГДЕ
		|	ЗаказПокупателяТовары.Ссылка В(&ЗаказПокупателя)
		|	И ВТ_НомПроценки.Номер ЕСТЬ NULL
		|	И ВТ_НомПроценки.Бренд ЕСТЬ NULL";
	
	//Запрос.Параметры.Вставить("ЗаказПокупателя", Элементыформы.ЗаказПокупателя.Значение);
	Запрос.Параметры.Вставить("ЗаказПокупателя", ТабЗаказы.ВыгрузитьКолонку("ЗаказПокупателя"));
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ДобавленаНоменклатура = Истина;
	КонецЕсли;
	
	Возврат ДобавленаНоменклатура;

КонецФункции

Функция ПроверитьСоставЗаказов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИНФ_API_ПроценкиЗаказыПокупателя.ЗаказПокупателя,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИНФ_API_ПроценкиЗаказыПокупателя.ЗаказПокупателя) КАК ЗаказПокупателя1
		|ИЗ
		|	Справочник.ИНФ_API_Проценки.ЗаказыПокупателя КАК ИНФ_API_ПроценкиЗаказыПокупателя
		|ГДЕ
		|	ИНФ_API_ПроценкиЗаказыПокупателя.ЗаказПокупателя В(&ЗаказПокупателя)
		|
		|СГРУППИРОВАТЬ ПО
		|	ИНФ_API_ПроценкиЗаказыПокупателя.ЗаказПокупателя";
	
	Запрос.Параметры.Вставить("ЗаказПокупателя", ТабЗаказы.ВыгрузитьКолонку("ЗаказПокупателя"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Результат = ?(ТабЗаказы.Количество() > ВыборкаДетальныеЗаписи.Количество(), Истина, Ложь);
	
	Возврат Результат;
	
КонецФункции	

Процедура УправлениеДоступностью()
	
	ОтборЗагруженых = Новый Структура();
	ОтборЗагруженых.Вставить("Отработана", 1);
	СтрокиЗагруженых = ТЗ_СозданныеПроценкиПоПоставщикам.НайтиСтроки(ОтборЗагруженых);
	
	//ЭлементыФормы.Панель1.Страницы.Страница3.Доступность = НЕ ТЗ_.Количество() = 0;
	//Если НЕ ТЗ_РазобраноПоПоставщикам.Количество() = 0 ИЛИ ТЗ_СозданныеПроценкиПоПоставщикам.Количество() = СтрокиЗагруженых.Количество() Тогда
	Если ТЗ_СозданныеПроценкиПоПоставщикам.Количество() = СтрокиЗагруженых.Количество() Тогда
		ЭлементыФормы.Панель1.Страницы.Страница1.Доступность	= Истина;
		//ЭлементыФормы.Панель1.Страницы.Страница3.Доступность 	= Истина;
		ЭлементыФормы.Пересчитать.Доступность					= Истина;
		ЭлементыФормы.Проценить.Доступность						= Истина;
	Иначе
		ЭлементыФормы.Панель1.Страницы.Страница1.Доступность 	= Ложь;
		//ЭлементыФормы.Панель1.Страницы.Страница3.Доступность 	= Ложь;
		ЭлементыФормы.Пересчитать.Доступность					= Ложь;
		ЭлементыФормы.Проценить.Доступность						= Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаменитьНажатие(Элемент)
	
	ЗаменаКоличество = ЭлементыФормы.ЗаменаКоличество.Значение;
	
	ИНФ_ПроцентНаценкиМакс			= ЭлементыФормы.ТЗ_.ТекущаяСтрока.ИНФ_ПроцентНаценкиМакс;
	НашаМаржаМинимальная			= ЗаказПокупателя.Маржа;
	//НаценкаЗаНулевойВес 			= ?(ЗаказПокупателя.ИНФ_НаправлениеДоставкиЗаказа.Направление.ЦенаНулевогоВеса = 0, 1, ЗаказПокупателя.ИНФ_НаправлениеДоставкиЗаказа.Направление.ЦенаНулевогоВеса/100);
	НаценкаЗаНулевойВес 			= ЗаказПокупателя.ИНФ_НаправлениеДоставкиЗаказа.Направление.ЦенаНулевогоВеса/100;
	
	НаправлениеЦенаВесИзПрайса 		= ЗаказПокупателя.ИНФ_НаправлениеДоставкиЗаказа.Направление.ЦенаВесИзПрайса;
	НаправлениеЦенаОбъемИзПрайса 	= ЗаказПокупателя.ИНФ_НаправлениеДоставкиЗаказа.Направление.ОбъемВесИзПрайса;
	
	ИНФ_Поставщик					= ЭлементыФормы.ТЗ_ДанныеПроценкиОтбор.ТекущаяСтрока.ПоставщикКонтрагент;
	ИНФ_API_Поставщики_suppliers	= ЭлементыФормы.ТЗ_ДанныеПроценкиОтбор.ТекущаяСтрока.ИНФ_API_Поставщики_suppliers;
	price_list	 					= ЭлементыФормы.ТЗ_ДанныеПроценкиОтбор.ТекущаяСтрока.price_list;
	reference  						= ЭлементыФормы.ТЗ_ДанныеПроценкиОтбор.ТекущаяСтрока.reference;
	КоличествоПроценки 				= ЭлементыФормы.ТЗ_ДанныеПроценкиОтбор.ТекущаяСтрока.Остаток;
	ЦенаПоставщика2					= ЭлементыФормы.ТЗ_ДанныеПроценкиОтбор.ТекущаяСтрока.Price_2;
	Вес								= ЭлементыФормы.ТЗ_ДанныеПроценкиОтбор.ТекущаяСтрока.weight;
	Объем							= ЭлементыФормы.ТЗ_ДанныеПроценкиОтбор.ТекущаяСтрока.volume;
	
	РезобраноЗаказПокупателя		= ЭлементыФормы.ТЗ_РазобраноПоПоставщикам_Отбор.ТекущаяСтрока.ЗаказПокупателя;
	Прайс							= ЭлементыФормы.ТЗ_РазобраноПоПоставщикам_Отбор.ТекущаяСтрока.Прайс;
	ИДСтрокиПроценка	  			= ЭлементыФормы.ТЗ_РазобраноПоПоставщикам_Отбор.ТекущаяСтрока.ИДСтрокиПроценка;
	ИДСтроки					  	= ЭлементыФормы.ТЗ_РазобраноПоПоставщикам_Отбор.ТекущаяСтрока.ИДСтроки;
	КоличествоРаспределено			= ЭлементыФормы.ТЗ_РазобраноПоПоставщикам_Отбор.ТекущаяСтрока.Количество;
	
	ЕстьОшибка = Ложь;
	
	Если price_list = Прайс Тогда
		ЕстьОшибка = Истина;
	ИначеЕсли ЗаменаКоличество > КоличествоПроценки Тогда
		Сообщить("Заменяемое количество превышает остаток по прайсу.");
		ЕстьОшибка = Истина;
	ИначеЕсли ЗаменаКоличество > КоличествоРаспределено Тогда
		Сообщить("Заменяемое количество превышает распределенное количество.");
		ЕстьОшибка = Истина;
	КонецЕсли;
	
	Если НЕ ЕстьОшибка Тогда
		
		ВалютаР   = Справочники.Валюты.НайтиПоКоду("784");
		ВалютаРуб = Справочники.Валюты.НайтиПоКоду("643");
		ВалютаUSD = Справочники.Валюты.НайтиПоКоду("840");
		
		КурсВалютыР				= ПолучитьКурсВалюты(ВалютаР, РезобраноЗаказПокупателя.Дата);
		КурсВалютыUSD			= ПолучитьКурсВалюты(ВалютаUSD, РезобраноЗаказПокупателя.Дата);
		КурсРуб					= ПолучитьКурсВалюты(ВалютаРуб, РезобраноЗаказПокупателя.ЗаказПокупателя.Дата);
		КурсВалютыЗаказа		= ПолучитьКурсВалюты(РезобраноЗаказПокупателя.ВалютаДокумента, РезобраноЗаказПокупателя.Дата);
				
		Отбор = Новый Структура("price_list, reference", price_list, reference);
		СтрокаПроценки = ТЗ_ДанныеПроценки.НайтиСтроки(Отбор);
		Если СтрокаПроценки.Количество() = 1 Тогда
			СтрокаПроценки[0].Остаток = СтрокаПроценки[0].Остаток - ЗаменаКоличество; 
		КонецЕсли;
		
		Отбор = Новый Структура("price_list, reference", Прайс, ИДСтрокиПроценка);
		СтрокаПроценки = ТЗ_ДанныеПроценки.НайтиСтроки(Отбор);
		Если СтрокаПроценки.Количество() = 1 Тогда
			СтрокаПроценки[0].Остаток = СтрокаПроценки[0].Остаток + ЗаменаКоличество; 
		КонецЕсли;
		
		//********************************************
		

		Отбор = Новый Структура("Прайс, ИДСтроки", Прайс, ИДСтроки);
		СтрокаПроценки = ТЗ_РазобраноПоПоставщикам.НайтиСтроки(Отбор);
		Если СтрокаПроценки.Количество() = 1 Тогда
			
			Отбор2 = Новый Структура("Прайс, ИДСтроки", price_list, ИДСтроки);
			СтрокиРаспределения = ТЗ_РазобраноПоПоставщикам.НайтиСтроки(Отбор2);
			Если СтрокиРаспределения.Количество() > 0 Тогда
				
				СтрокаРаспределения = СтрокиРаспределения[0];
				СтрокаРаспределения.Количество				= СтрокаРаспределения.Количество + ЗаменаКоличество;
				СтрокаРаспределения.ИНФ_КоличествоКлиента	= СтрокаРаспределения.Количество;
				
				//КурсВалютыПоставщика = ПолучитьКурсВалюты(СтрокаРаспределения.APIПоставщик.Валюта, РезобраноЗаказПокупателя.Дата);
				//КоэффКурсаПоставщика = ?(СтрокаРаспределения.APIПоставщик.Валюта = Константы.ВалютаРегламентированногоУчета.Получить(), 1, КурсВалютыР/КурсВалютыПоставщика);
				
				ЦенаКлиента			= СтрокаРаспределения.Цена_2;
				Если НЕ ЦенаКлиента = 0 Тогда
					//ЦенаПоставщика		= СтрокаРаспределения.ИНФ_ЗакупочнаяЦена_2 / КурсВалютыЗаказа * СтрокаРаспределения.APIПоставщик.ПроцентНаценки;
					ЦенаПоставщика		= СтрокаРаспределения.ИНФ_ЗакупочнаяЦена_2 / КурсВалютыUSD * ?(РезобраноЗаказПокупателя.ВалютаДокумента = ВалютаРуб, КурсВалютыЗаказа, 1) * СтрокаРаспределения.APIПоставщик.ПроцентНаценки;
					ЦенаПоставщика2		= СтрокаРаспределения.ИНФ_ЗакупочнаяЦена_2 * СтрокаРаспределения.APIПоставщик.ПроцентНаценки;
					
					Если (Вес <> 0 И НаправлениеЦенаВесИзПрайса = 0) ИЛИ (Объем <> 0 И НаправлениеЦенаОбъемИзПрайса = 0) Тогда
						ЦенаДоставки 	= 0;
						ЦенаДоставки_2  = 0;
						
						//Если Вес <> 0 И Объем <> 0
						Если Вес <> 0 И НаправлениеЦенаВесИзПрайса = 0
							И НаценкаЗаНулевойВес <> 0 Тогда
							
							ЦенаДоставки		= ЦенаПоставщика * НаценкаЗаНулевойВес;
							ЦенаДоставки_2		= ЦенаПоставщика2 * НаценкаЗаНулевойВес;										
							
							ЦенаДоставки		= Окр(ЦенаДоставки + 0.005, 2, 0);
							ЦенаДоставки_2		= Окр(ЦенаДоставки_2 + 0.005, 2, 0);
						КонецЕсли;
						
					Иначе
						
						ЦенаДоставки        = Вес * НаправлениеЦенаВесИзПрайса * КурсВалютыЗаказа / ?(РезобраноЗаказПокупателя.ВалютаДокумента = ВалютаUSD, КурсВалютыЗаказа, 1) 
						+ Объем * НаправлениеЦенаОбъемИзПрайса * КурсВалютыЗаказа / ?(РезобраноЗаказПокупателя.ВалютаДокумента = ВалютаUSD, КурсВалютыЗаказа, 1);
						
						ЦенаДоставки_2		= Вес * НаправлениеЦенаВесИзПрайса * КурсВалютыUSD
						+ Объем * НаправлениеЦенаОбъемИзПрайса * КурсВалютыUSD;
						
						ЦенаДоставки		= ?(Вес = 0, ЦенаПоставщика * НаценкаЗаНулевойВес, ЦенаДоставки);
						ЦенаДоставки_2		= ?(Вес = 0, ЦенаПоставщика * НаценкаЗаНулевойВес, ЦенаДоставки_2);
						
						ЦенаДоставки		= Окр(ЦенаДоставки + 0.005, 2, 0);
						ЦенаДоставки_2		= Окр(ЦенаДоставки_2 + 0.005, 2, 0);
						
					КонецЕсли;
											
					//НашаЦена			= СтрокаРаспределения.ИНФ_ЗакупочнаяЦена * СтрокаРаспределения.APIПоставщик.ПроцентНаценки;	// + ЦенаДоставки;
					//НашаЦена			= ЦенаПоставщика; // * (1+НашаМаржаМинимальная/100);	// + ЦенаДоставки;
					//НашаЦена_2			= ЦенаПоставщика2 * (1+НашаМаржаМинимальная/100) + ЦенаДоставки_2;
					НашаЦена			= ЦенаПоставщика  + ЦенаДоставки;
					НашаЦена_2			= ЦенаПоставщика2 + ЦенаДоставки_2;
																						
					НашаВыгода			= ЦенаКлиента - НашаЦена_2;

					НашаВыгодаПроцент	= ?(ЦенаПоставщика2 = 0, 100, НашаВыгода/ЦенаПоставщика2*100);
					ЦенаКлиентаМакс 	= ЦенаКлиента + (ЦенаКлиента*ИНФ_ПроцентНаценкиМакс)/100; 
				Иначе
					//ЦенаПоставщика		= СтрокаРаспределения.ИНФ_ЗакупочнаяЦена_2 / КурсВалютыЗаказа * СтрокаРаспределения.APIПоставщик.ПроцентНаценки;
					ЦенаПоставщика		= СтрокаРаспределения.ИНФ_ЗакупочнаяЦена_2 / КурсВалютыUSD * ?(РезобраноЗаказПокупателя.ВалютаДокумента = ВалютаРуб, КурсВалютыЗаказа, 1) * СтрокаРаспределения.APIПоставщик.ПроцентНаценки;
					ЦенаПоставщика2		= СтрокаРаспределения.ИНФ_ЗакупочнаяЦена_2*СтрокаРаспределения.APIПоставщик.ПроцентНаценки;
					
					Если (Вес <> 0 И НаправлениеЦенаВесИзПрайса = 0) ИЛИ (Объем <> 0 И НаправлениеЦенаОбъемИзПрайса = 0) Тогда
						ЦенаДоставки 	= 0;
						ЦенаДоставки_2  = 0;
						
						//Если Вес <> 0 И Объем <> 0
						Если Вес <> 0 И НаправлениеЦенаВесИзПрайса = 0
							И НаценкаЗаНулевойВес <> 0 Тогда
							
							ЦенаДоставки		= ЦенаПоставщика * НаценкаЗаНулевойВес;
							ЦенаДоставки_2		= ЦенаПоставщика2 * НаценкаЗаНулевойВес;										
							
							ЦенаДоставки		= Окр(ЦенаДоставки + 0.005, 2, 0);
							ЦенаДоставки_2		= Окр(ЦенаДоставки_2 + 0.005, 2, 0);
						КонецЕсли;
					Иначе
						
						ЦенаДоставки		= (Вес * НаправлениеЦенаВесИзПрайса * КурсВалютыЗаказа / ?(РезобраноЗаказПокупателя.ВалютаДокумента = ВалютаUSD, КурсВалютыЗаказа, 1) 
						+ Объем * НаправлениеЦенаОбъемИзПрайса * КурсВалютыЗаказа / ?(РезобраноЗаказПокупателя.ВалютаДокумента = ВалютаUSD, КурсВалютыЗаказа, 1));
						
						ЦенаДоставки_2		= (Вес * НаправлениеЦенаВесИзПрайса * КурсВалютыUSD
						+ Объем * НаправлениеЦенаОбъемИзПрайса * КурсВалютыUSD);
						
						ЦенаДоставки		= ?(Вес = 0, ЦенаПоставщика * НаценкаЗаНулевойВес, ЦенаДоставки);
						ЦенаДоставки_2		= ?(Вес = 0, ЦенаПоставщика * НаценкаЗаНулевойВес, ЦенаДоставки_2);
						
						ЦенаДоставки		= Окр(ЦенаДоставки + 0.005, 2, 0);
						ЦенаДоставки_2		= Окр(ЦенаДоставки_2 + 0.005, 2, 0);
						
					КонецЕсли;
											
					//НашаЦена			= (СтрокаРаспределения.ИНФ_ЗакупочнаяЦена*СтрокаРаспределения.APIПоставщик.ПроцентНаценки)*(1+НашаМаржаМинимальная/100) + ЦенаДоставки;
					НашаЦена			= ЦенаПоставщика*(1+НашаМаржаМинимальная/100) + ЦенаДоставки;
					НашаЦена_2			= ЦенаПоставщика2*(1+НашаМаржаМинимальная/100) + ЦенаДоставки_2;
					
					НашаВыгода			= НашаЦена_2-ЦенаПоставщика2;

					НашаВыгодаПроцент	= ?(ЦенаПоставщика2 = 0, 100, НашаВыгода/ЦенаПоставщика2*100);
					ЦенаКлиентаМакс 	= ЦенаКлиента + (ЦенаКлиента*ИНФ_ПроцентНаценкиМакс)/100; 
				КонецЕсли;
				
				СтрокаРаспределения.НашаЦена			= НашаЦена; 
				СтрокаРаспределения.НашаЦена_2			= НашаЦена_2; 
				СтрокаРаспределения.Сумма				= СтрокаРаспределения.НашаЦена_2 * СтрокаРаспределения.Количество;
				СтрокаРаспределения.ИНФ_ПроцентНаценки	= НашаВыгодаПроцент;
				
			Иначе
				НоваяСтрока = ТЗ_РазобраноПоПоставщикам.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаПроценки[0]);
				НоваяСтрока.APIПоставщик			= ИНФ_API_Поставщики_suppliers;
				НоваяСтрока.Прайс					= price_list;
				НоваяСтрока.APIНаименованиеПрайса	= price_list;
				НоваяСтрока.ИНФ_ЗакупочнаяЦена_2	= ЦенаПоставщика2;
				НоваяСтрока.Количество				= ЗаменаКоличество;
				НоваяСтрока.ИНФ_КоличествоКлиента	= НоваяСтрока.Количество;
				НоваяСтрока.ИНФ_Поставщик			= ИНФ_Поставщик;
				
				ЦенаКлиента			= НоваяСтрока.Цена_2;
				Если НЕ ЦенаКлиента = 0 Тогда
					//ЦенаПоставщика		= НоваяСтрока.ИНФ_ЗакупочнаяЦена_2 / КурсВалютыЗаказа * НоваяСтрока.APIПоставщик.ПроцентНаценки;
					ЦенаПоставщика		= НоваяСтрока.ИНФ_ЗакупочнаяЦена_2 / КурсВалютыUSD * ?(РезобраноЗаказПокупателя.ВалютаДокумента = ВалютаРуб, КурсВалютыЗаказа, 1) * НоваяСтрока.APIПоставщик.ПроцентНаценки;
					ЦенаПоставщика2		= НоваяСтрока.ИНФ_ЗакупочнаяЦена_2 * НоваяСтрока.APIПоставщик.ПроцентНаценки;
					
					Если (Вес <> 0 И НаправлениеЦенаВесИзПрайса = 0) ИЛИ (Объем <> 0 И НаправлениеЦенаОбъемИзПрайса = 0) Тогда
						ЦенаДоставки 	= 0;
						ЦенаДоставки_2  = 0;
						
						Если Вес <> 0 И НаправлениеЦенаВесИзПрайса = 0
							И НаценкаЗаНулевойВес <> 0 Тогда
							
							ЦенаДоставки		= ЦенаПоставщика * НаценкаЗаНулевойВес;
							ЦенаДоставки_2		= ЦенаПоставщика2 * НаценкаЗаНулевойВес;										
							
							ЦенаДоставки		= Окр(ЦенаДоставки + 0.005, 2, 0);
							ЦенаДоставки_2		= Окр(ЦенаДоставки_2 + 0.005, 2, 0);
						КонецЕсли;
					Иначе
						
						ЦенаДоставки        = Вес * НаправлениеЦенаВесИзПрайса * КурсВалютыЗаказа / ?(РезобраноЗаказПокупателя.ВалютаДокумента = ВалютаUSD, КурсВалютыЗаказа, 1) 
						+ Объем * НаправлениеЦенаОбъемИзПрайса * КурсВалютыЗаказа / ?(РезобраноЗаказПокупателя.ВалютаДокумента = ВалютаUSD, КурсВалютыЗаказа, 1);
						ЦенаДоставки_2		= Вес * НаправлениеЦенаВесИзПрайса * КурсВалютыUSD
						+ Объем * НаправлениеЦенаОбъемИзПрайса * КурсВалютыUSD;
						
						ЦенаДоставки		= ?(Вес = 0, ЦенаПоставщика * НаценкаЗаНулевойВес, ЦенаДоставки);
						ЦенаДоставки_2		= ?(Вес = 0, ЦенаПоставщика * НаценкаЗаНулевойВес, ЦенаДоставки_2);
						
						ЦенаДоставки		= Окр(ЦенаДоставки + 0.005, 2, 0);
						ЦенаДоставки_2		= Окр(ЦенаДоставки_2 + 0.005, 2, 0);
						
					КонецЕсли;
											
					//НашаЦена			= НоваяСтрока.ИНФ_ЗакупочнаяЦена * НоваяСтрока.APIПоставщик.ПроцентНаценки;	// + ЦенаДоставки; 
					//НашаЦена			= ЦенаПоставщика;// * (1+НашаМаржаМинимальная/100);	// + ЦенаДоставки; 
					//НашаЦена_2			= ЦенаПоставщика2 * (1+НашаМаржаМинимальная/100) + ЦенаДоставки_2; 
					НашаЦена			= ЦенаПоставщика  + ЦенаДоставки;
					НашаЦена_2			= ЦенаПоставщика2 + ЦенаДоставки_2; 
					
					НашаВыгода			= ЦенаКлиента - НашаЦена_2;

					НашаВыгодаПроцент	= ?(ЦенаПоставщика2 = 0, 100, НашаВыгода/ЦенаПоставщика2*100);
					ЦенаКлиентаМакс 	= ЦенаКлиента + (ЦенаКлиента*ИНФ_ПроцентНаценкиМакс)/100; 
				Иначе
					//ЦенаПоставщика		= НоваяСтрока.ИНФ_ЗакупочнаяЦена_2 / КурсВалютыЗаказа * НоваяСтрока.APIПоставщик.ПроцентНаценки;
					ЦенаПоставщика		= НоваяСтрока.ИНФ_ЗакупочнаяЦена_2 / КурсВалютыUSD * ?(РезобраноЗаказПокупателя.ВалютаДокумента = ВалютаРуб, КурсВалютыЗаказа, 1) * НоваяСтрока.APIПоставщик.ПроцентНаценки;
					ЦенаПоставщика2		= НоваяСтрока.ИНФ_ЗакупочнаяЦена_2 * НоваяСтрока.APIПоставщик.ПроцентНаценки;
					
					Если (Вес <> 0 И НаправлениеЦенаВесИзПрайса = 0) ИЛИ (Объем <> 0 И НаправлениеЦенаОбъемИзПрайса = 0) Тогда
						ЦенаДоставки 	= 0;
						ЦенаДоставки_2  = 0;
						
						Если Вес <> 0 И НаправлениеЦенаВесИзПрайса = 0
							И НаценкаЗаНулевойВес <> 0 Тогда
							
							ЦенаДоставки		= ЦенаПоставщика * НаценкаЗаНулевойВес;
							ЦенаДоставки_2		= ЦенаПоставщика2 * НаценкаЗаНулевойВес;										
							
							ЦенаДоставки		= Окр(ЦенаДоставки + 0.005, 2, 0);
							ЦенаДоставки_2		= Окр(ЦенаДоставки_2 + 0.005, 2, 0);
						КонецЕсли;
					Иначе
						
						ЦенаДоставки		= (Вес * НаправлениеЦенаВесИзПрайса * КурсВалютыЗаказа / ?(РезобраноЗаказПокупателя.ВалютаДокумента = ВалютаUSD, КурсВалютыЗаказа, 1) 
						+ Объем * НаправлениеЦенаОбъемИзПрайса  * КурсВалютыЗаказа / ?(РезобраноЗаказПокупателя.ВалютаДокумента = ВалютаUSD, КурсВалютыЗаказа, 1));
						ЦенаДоставки_2		= (Вес * НаправлениеЦенаВесИзПрайса * КурсВалютыUSD
						+ Объем * НаправлениеЦенаОбъемИзПрайса * КурсВалютыUSD);
						
						ЦенаДоставки		= ?(Вес = 0, ЦенаПоставщика * НаценкаЗаНулевойВес, ЦенаДоставки);
						ЦенаДоставки_2		= ?(Вес = 0, ЦенаПоставщика * НаценкаЗаНулевойВес, ЦенаДоставки_2);
						
						ЦенаДоставки		= Окр(ЦенаДоставки + 0.005, 2, 0);
						ЦенаДоставки_2		= Окр(ЦенаДоставки_2 + 0.005, 2, 0);
						
					КонецЕсли;
					
					//НашаЦена			= (НоваяСтрока.ИНФ_ЗакупочнаяЦена * НоваяСтрока.APIПоставщик.ПроцентНаценки)*(1+НашаМаржаМинимальная/100)+ЦенаДоставки;
					НашаЦена			= ЦенаПоставщика*(1+НашаМаржаМинимальная/100) + ЦенаДоставки;
					НашаЦена_2			= ЦенаПоставщика2*(1+НашаМаржаМинимальная/100) + ЦенаДоставки_2;
					
					НашаВыгода			= НашаЦена_2-ЦенаПоставщика2;

					НашаВыгодаПроцент	= ?(ЦенаПоставщика2 = 0, 100, НашаВыгода/ЦенаПоставщика2*100);
					ЦенаКлиентаМакс 	= ЦенаКлиента + (ЦенаКлиента*ИНФ_ПроцентНаценкиМакс)/100; 
				КонецЕсли;
				
				НоваяСтрока.НашаЦена				= НашаЦена; 
				НоваяСтрока.НашаЦена_2				= НашаЦена_2; 
				НоваяСтрока.Сумма					= НоваяСтрока.НашаЦена_2 * НоваяСтрока.Количество;
				НоваяСтрока.ИНФ_ПроцентНаценки		= НашаВыгодаПроцент;
				
			КонецЕсли;			
			
			СтрокаПроценки[0].Количество			= СтрокаПроценки[0].Количество - ЗаменаКоличество; 
			СтрокаПроценки[0].ИНФ_КоличествоКлиента = СтрокаПроценки[0].Количество;
			Если СтрокаПроценки[0].Количество = 0 Тогда
				ТЗ_РазобраноПоПоставщикам.Удалить(СтрокаПроценки[0]);
			КонецЕсли; 
			
		КонецЕсли;
		
		ТЗ_РазобраноПоПоставщикам.Сортировать("Номер возр, Цена_2 убыв");
		
		ТЗ_ПриАктивизацииСтроки();
		
		ЭлементыФормы.ТЗ_ДанныеПроценкиОтбор.ТекущаяСтрока = ТЗ_ДанныеПроценкиОтбор.Найти(price_list);
		СтрокаРаспределения = ТЗ_РазобраноПоПоставщикам_Отбор.Найти(Прайс);
		Если СтрокаРаспределения = Неопределено Тогда //Полностью удалили строку при замене 
			СтрокаРаспределения = ТЗ_РазобраноПоПоставщикам_Отбор.Найти(price_list);
		КонецЕсли;
		ЭлементыФормы.ТЗ_РазобраноПоПоставщикам_Отбор.ТекущаяСтрока = СтрокаРаспределения;
		
		УправлениеДоступностьюКолонок("ТЗ_РазобраноПоПоставщикам", Истина);
		
		ЗаполнитьИтоговыеСуммыПоПоставщикам();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ТЗ_ПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
    Если ДанныеСтроки.Распределено = 0 Тогда
        //ОформлениеСтроки.Ячейки.Распределено.ЦветФона = Новый Цвет(255, 134, 134);
		//ОформлениеСтроки.Ячейки.Количество.ЦветФона = Новый Цвет(255, 134, 134);
		ОформлениеСтроки.ЦветФона = Новый Цвет(255, 134, 134);
		ОформлениеСтроки.ЦветФона = Новый Цвет(255, 134, 134);
	ИначеЕсли ДанныеСтроки.Распределено < ДанныеСтроки.Количество Тогда
		//ОформлениеСтроки.Ячейки.Распределено.ЦветФона = Новый Цвет(134, 134, 255);
		//ОформлениеСтроки.Ячейки.Количество.ЦветФона = Новый Цвет(134, 134, 255);
		ОформлениеСтроки.ЦветФона = Новый Цвет(134, 134, 255);
		ОформлениеСтроки.ЦветФона = Новый Цвет(134, 134, 255);
	КонецЕсли;	
	
КонецПроцедуры

Процедура УправлениеВидимостьюКолонок(ИмяТЗ, СписокКолонок = Неопределено, Видимость = Ложь)

	Для каждого СтрКолонка Из СписокКолонок Цикл
		ЭлементыФормы[ИмяТЗ].Колонки[СтрКолонка.Значение].Видимость = Видимость;	
	КонецЦикла; 
	
КонецПроцедуры

Процедура ОсновныеДействияФормыВернутьсяВЗаказКлиента(Кнопка)
	
	
	ФормаЗаказа = ТабЗаказы[0].ЗаказПокупателя.ПолучитьФорму();
	ФормаЗаказа.Открыть();
	ЭтаФорма.Закрыть();
	
КонецПроцедуры

Процедура ПроставитьФлагиПрайсов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИНФ_API_ПроценкиПрайсы.Прайс
	|ИЗ
	|	Справочник.ИНФ_API_Проценки.Прайсы КАК ИНФ_API_ПроценкиПрайсы
	|ГДЕ
	|	ИНФ_API_ПроценкиПрайсы.Ссылка.ЗаказПокупателя = &ЗаказПокупателя
	|	И ИНФ_API_ПроценкиПрайсы.Ссылка.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.Параметры.Вставить("ЗаказПокупателя", Элементыформы.ЗаказПокупателя.Значение);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если НЕ Результат.Количество() = 0 Тогда
		Для каждого СтрПрайс Из ТЗ_Настройка_ПрайсыПоставщиков Цикл
			СтрПрайс.Выбран = Ложь;
			Если НЕ Результат.Найти(СтрПрайс.ПрайсПоставщика) = Неопределено Тогда
				СтрПрайс.Выбран = Истина;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 

КонецПроцедуры

Функция ПолучитьДанныеДляПроценки(ЗаказПокупателя)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИНФ_ЗаказУниверсальный.ЗаказУниверсальный,
	|	ИНФ_ЗаказУниверсальный.ЗаказПокупателя
	|ИЗ
	|	РегистрСведений.ИНФ_ЗаказУниверсальный КАК ИНФ_ЗаказУниверсальный
	|ГДЕ
	|	ИНФ_ЗаказУниверсальный.ЗаказПокупателя = &ЗаказПокупателя";
	
	Запрос.Параметры.Вставить("ЗаказПокупателя", ЗаказПокупателя);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда //Нет записей берем из заказа покупателя

		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПокупателяТовары.Ссылка,
		|	ЗаказПокупателяТовары.НомерСтроки,
		|	ЗаказПокупателяТовары.ЕдиницаИзмерения,
		|	ЗаказПокупателяТовары.ЕдиницаИзмеренияМест,
		|	ЗаказПокупателяТовары.Количество,
		|	ЗаказПокупателяТовары.КоличествоМест,
		|	ЗаказПокупателяТовары.Коэффициент,
		|	ЗаказПокупателяТовары.Номенклатура,
		|	ЗаказПокупателяТовары.ПлановаяСебестоимость,
		|	ЗаказПокупателяТовары.ПроцентСкидкиНаценки,
		|	ЗаказПокупателяТовары.Размещение,
		|	ЗаказПокупателяТовары.СтавкаНДС,
		|	ЗаказПокупателяТовары.Сумма,
		|	ЗаказПокупателяТовары.СуммаНДС,
		|	ЗаказПокупателяТовары.ХарактеристикаНоменклатуры,
		|	ЗаказПокупателяТовары.Цена КАК Цена,
		|	ЗаказПокупателяТовары.Цена КАК ЦенаЗаказа,
		|	ЗаказПокупателяТовары.ПроцентАвтоматическихСкидок,
		|	ЗаказПокупателяТовары.УсловиеАвтоматическойСкидки,
		|	ЗаказПокупателяТовары.ЗначениеУсловияАвтоматическойСкидки,
		|	ЗаказПокупателяТовары.КлючСтроки,
		|	ЗаказПокупателяТовары.СерияНоменклатуры,
		|	ЗаказПокупателяТовары.ИНФ_ПроцентНаценки,
		|	ЗаказПокупателяТовары.ИНФ_ПроцентНаценкиМакс,
		|	ЗаказПокупателяТовары.ИНФ_Референс,
		|	ЗаказПокупателяТовары.ИдСтроки,
		|	ЗаказПокупателяТовары.ИдСтроки_2,
		|	ЗаказПокупателяТовары.ИДСтрокиПроценка,
		|	ЗаказПокупателяТовары.НаименованиеСтрокой,
		|	ЗаказПокупателяТовары.Ссылка.БезЦен,
		|	ВЫБОР
		|		КОГДА ЗаказПокупателяТовары.Ссылка.НаценкаСверху = 0
		|			ТОГДА 1
		|		ИНАЧЕ ЗаказПокупателяТовары.Ссылка.НаценкаСверху
		|	КОНЕЦ КАК НаценкаСверху
		|ИЗ
		|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
		|ГДЕ
		|	ЗаказПокупателяТовары.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ЗаказПокупателя);
		
		ТЗ = Запрос.Выполнить().Выгрузить();
		
		Для каждого Стр Из ТЗ Цикл
			Стр.Цена		= ?(Стр.БезЦен, 0, Окр(Стр.Цена / Стр.НаценкаСверху + 0.005, 2, 0));
			Стр.ЦенаЗаказа	= ?(Стр.БезЦен, 0, Окр(Стр.ЦенаЗаказа / Стр.НаценкаСверху + 0.005, 2, 0));
		КонецЦикла; 
		
		//ТЗ = ЗаказПокупателя.Товары.Выгрузить();
		//ТЗ.Колонки.Добавить("ЦенаЗаказа");
		//Для каждого Стр Из ТЗ Цикл
		//	Стр.ЦенаЗаказа = Стр.Цена;
		//КонецЦикла; 
	Иначе
		
		//Запрос = Новый Запрос;
		//Запрос.Текст = 
		//"ВЫБРАТЬ
		//|	ЗаказПокупателяТовары.Ссылка,
		//|	ЗаказПокупателяТовары.ИдСтроки_2,
		//|	ЗаказПокупателяТовары.Цена
		//|ПОМЕСТИТЬ ВТ_ЦенаЗК
		//|ИЗ
		//|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	ИНФ_ЗаказУниверсальный.ЗаказУниверсальный,
		//|	ИНФ_ЗаказУниверсальный.ЗаказПокупателя,
		//|	ИНФ_ЗаказУниверсальный.ИД,
		//|	ИНФ_ЗаказУниверсальный.ИНФ_Статус,
		//|	ИНФ_ЗаказУниверсальный.СтатусЗП,
		//|	ИНФ_ЗаказУниверсальный.ЗП_Строка_ИД,
		//|	ИНФ_ЗаказУниверсальный.ЕдиницаИзмерения,
		//|	ИНФ_ЗаказУниверсальный.Количество КАК КоличествоЗаказано,
		//|	ИНФ_ЗаказУниверсальный.Коэффициент,
		//|	ИНФ_ЗаказУниверсальный.Номенклатура,
		//|	ИНФ_ЗаказУниверсальный.СтавкаНДС,
		//|	ИНФ_ЗаказУниверсальный.Цена КАК Цена,
		//|	ИНФ_ЗаказУниверсальный.ИНФ_ЗакупочнаяЦена,
		//|	ИНФ_ЗаказУниверсальный.ИНФ_Поставщик,
		//|	ИНФ_ЗаказУниверсальный.ИНФ_ПроцентНаценкиМакс,
		//|	ИНФ_ЗаказУниверсальный.ИНФ_ПроцентНаценки,
		//|	ИНФ_ЗаказУниверсальный.APIПоставщик,
		//|	ИНФ_ЗаказУниверсальный.APIНаименованиеПрайса,
		//|	ИНФ_ЗаказУниверсальный.ApiБренд,
		//|	ИНФ_ЗаказУниверсальный.ИНФ_Референс,
		//|	ИНФ_ЗаказУниверсальный.ИдСтроки,
		//|	ИНФ_ЗаказУниверсальный.ИдСтроки_2,
		//|	ИНФ_ЗаказУниверсальный.ИДСтрокиПроценка,
		//|	ВЫБОР
		//|		КОГДА ИНФ_ЗаказУниверсальный.ИНФ_КоличествоКлиента = ИНФ_ЗаказУниверсальный.Количество
		//|				И ИНФ_ЗаказУниверсальный.ЗП_Строка_ИД = """"
		//|			ТОГДА ИНФ_ЗаказУниверсальный.Количество
		//|		КОГДА ИНФ_ЗаказУниверсальный.Количество < ИНФ_ЗаказУниверсальный.КоличествоНаСкладе
		//|			ТОГДА ИНФ_ЗаказУниверсальный.ИНФ_КоличествоКлиента - ИНФ_ЗаказУниверсальный.КоличествоНаСкладе - ИНФ_ЗаказУниверсальный.КоличествоОтказов
		//|		ИНАЧЕ ИНФ_ЗаказУниверсальный.ИНФ_КоличествоКлиента - ИНФ_ЗаказУниверсальный.Количество - ИНФ_ЗаказУниверсальный.КоличествоОтказов
		//|	КОНЕЦ КАК Количество,
		//|	ИНФ_ЗаказУниверсальный.Валюта,
		//|	ИНФ_ЗаказУниверсальный.ЦенаДоставки,
		//|	ИНФ_ЗаказУниверсальный.ЦенаДоставки_2,
		//|	ИНФ_ЗаказУниверсальный.Сумма,
		//|	ИНФ_ЗаказУниверсальный.СуммаНДС,
		//|	ИНФ_ЗаказУниверсальный.КоличествоОтказов,
		//|	ВТ_ЦенаЗК.Цена КАК ЦенаЗаказа
		//|ИЗ
		//|	РегистрСведений.ИНФ_ЗаказУниверсальный КАК ИНФ_ЗаказУниверсальный
		//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЦенаЗК КАК ВТ_ЦенаЗК
		//|		ПО ИНФ_ЗаказУниверсальный.ЗаказПокупателя = ВТ_ЦенаЗК.Ссылка
		//|			И ИНФ_ЗаказУниверсальный.ИдСтроки_2 = ВТ_ЦенаЗК.ИдСтроки_2
		//|ГДЕ
		//|	ИНФ_ЗаказУниверсальный.ЗаказПокупателя = &ЗаказПокупателя
		//|	И ИНФ_ЗаказУниверсальный.Поступление = ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)
		//|	И ИНФ_ЗаказУниверсальный.ИдСтроки_2 <> ""архив""
		//|	И (ВЫБОР
		//|				КОГДА ИНФ_ЗаказУниверсальный.Количество < ИНФ_ЗаказУниверсальный.КоличествоНаСкладе
		//|					ТОГДА ИНФ_ЗаказУниверсальный.ИНФ_КоличествоКлиента - ИНФ_ЗаказУниверсальный.КоличествоНаСкладе - ИНФ_ЗаказУниверсальный.КоличествоОтказов
		//|				ИНАЧЕ ИНФ_ЗаказУниверсальный.ИНФ_КоличествоКлиента - ИНФ_ЗаказУниверсальный.Количество - ИНФ_ЗаказУниверсальный.КоличествоОтказов
		//|			КОНЕЦ > 0
		//|			ИЛИ ИНФ_ЗаказУниверсальный.ИНФ_КоличествоКлиента = ИНФ_ЗаказУниверсальный.Количество
		//|				И ИНФ_ЗаказУниверсальный.ЗП_Строка_ИД = """")";
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИНФ_ЗаказУниверсальный.ЗаказПокупателя КАК ЗаказПокупателя,
		|	ИНФ_ЗаказУниверсальный.Номенклатура КАК Номенклатура,
		|	ИНФ_ЗаказУниверсальный.ИдСтроки,
		|	МАКСИМУМ(ИНФ_ЗаказУниверсальный.Цена) КАК Цена,
		|	СУММА(ВЫБОР
		|			КОГДА ИНФ_ЗаказУниверсальный.Количество < ИНФ_ЗаказУниверсальный.КоличествоНаСкладе
		|				ТОГДА ИНФ_ЗаказУниверсальный.КоличествоНаСкладе + ИНФ_ЗаказУниверсальный.КоличествоОтказов
		|			ИНАЧЕ ИНФ_ЗаказУниверсальный.Количество + ИНФ_ЗаказУниверсальный.КоличествоОтказов
		|		КОНЕЦ) КАК КоличествоЗаказано
		|ПОМЕСТИТЬ ВТ_Заказано
		|ИЗ
		|	РегистрСведений.ИНФ_ЗаказУниверсальный КАК ИНФ_ЗаказУниверсальный
		|ГДЕ
		|	ИНФ_ЗаказУниверсальный.ЗаказПокупателя = &ЗаказПокупателя
		|	И ИНФ_ЗаказУниверсальный.ИдСтроки_2 <> ""архив""
		|	И ИНФ_ЗаказУниверсальный.ЗП_Строка_ИД <> """"
		|
		|СГРУППИРОВАТЬ ПО
		|	ИНФ_ЗаказУниверсальный.ЗаказПокупателя,
		|	ИНФ_ЗаказУниверсальный.Номенклатура,
		|	ИНФ_ЗаказУниверсальный.ИдСтроки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗаказПокупателя,
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказПокупателяТовары.Ссылка КАК ЗаказПокупателя,
		|	ЗаказПокупателяТовары.Номенклатура,
		|	МАКСИМУМ(ЗаказПокупателяТовары.ИНФ_ПроцентНаценкиМакс) КАК ИНФ_ПроцентНаценкиМакс,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ВТ_Заказано.Цена ЕСТЬ NULL
		|				ТОГДА ЗаказПокупателяТовары.Цена
		|			ИНАЧЕ ВТ_Заказано.Цена
		|		КОНЕЦ) КАК Цена,
		|	МАКСИМУМ(ЗаказПокупателяТовары.Цена) КАК ЦенаЗаказа,
		|	СУММА(ЗаказПокупателяТовары.Количество) КАК КоличествоЗаказа,
		|	СУММА(ЕСТЬNULL(ВТ_Заказано.КоличествоЗаказано, 0)) КАК КоличествоЗаказано,
		|	СУММА(ЗаказПокупателяТовары.Количество - ЕСТЬNULL(ВТ_Заказано.КоличествоЗаказано, 0)) КАК Количество,
		|	ЗаказПокупателяТовары.ИдСтроки_2,
		|	ВЫБОР
		|		КОГДА ЗаказПокупателяТовары.Ссылка.НаценкаСверху = 0
		|			ТОГДА 1
		|		ИНАЧЕ ЗаказПокупателяТовары.Ссылка.НаценкаСверху
		|	КОНЕЦ КАК НаценкаСверху,
		|	ЗаказПокупателяТовары.Ссылка.БезЦен
		|ИЗ
		|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Заказано КАК ВТ_Заказано
		|		ПО ЗаказПокупателяТовары.Ссылка = ВТ_Заказано.ЗаказПокупателя
		|			И ЗаказПокупателяТовары.Номенклатура = ВТ_Заказано.Номенклатура
		|			И ЗаказПокупателяТовары.ИдСтроки = ВТ_Заказано.ИдСтроки
		|ГДЕ
		|	ЗаказПокупателяТовары.Количество - ЕСТЬNULL(ВТ_Заказано.КоличествоЗаказано, 0) > 0
		|	И ЗаказПокупателяТовары.Ссылка = &ЗаказПокупателя
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказПокупателяТовары.Ссылка,
		|	ЗаказПокупателяТовары.Номенклатура,
		|	ЗаказПокупателяТовары.ИдСтроки_2,
		|	ВЫБОР
		|		КОГДА ЗаказПокупателяТовары.Ссылка.НаценкаСверху = 0
		|			ТОГДА 1
		|		ИНАЧЕ ЗаказПокупателяТовары.Ссылка.НаценкаСверху
		|	КОНЕЦ,
		|	ЗаказПокупателяТовары.Ссылка.БезЦен";

		Запрос.Параметры.Вставить("ЗаказПокупателя", ЗаказПокупателя);
		
		РезультатЗапроса = Запрос.Выполнить();
		ТЗ = РезультатЗапроса.Выгрузить();
		
		Для каждого Стр Из ТЗ Цикл
			Стр.Цена		= ?(Стр.БезЦен, 0, Окр(Стр.Цена / Стр.НаценкаСверху + 0.005, 2, 0));
			Стр.ЦенаЗаказа	= ?(Стр.БезЦен, 0, Окр(Стр.ЦенаЗаказа / Стр.НаценкаСверху + 0.005, 2, 0));
		КонецЦикла; 
		
		ТЗ.Свернуть("ЗаказПокупателя, Номенклатура, Цена, ЦенаЗаказа, ИдСтроки_2, ИНФ_ПроцентНаценкиМакс", "Количество");
		
	КонецЕсли;
	
	Возврат ТЗ; 
	
КонецФункции

Функция ПолучитьДанныеВОбработке(ЗаказПокупателя)	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИНФ_ЗаказУниверсальный.ЗаказУниверсальный,
		|	ИНФ_ЗаказУниверсальный.ЗаказПокупателя,
		|	ИНФ_ЗаказУниверсальный.ИНФ_Статус,
		|	ИНФ_ЗаказУниверсальный.СтатусЗП,
		|	ИНФ_ЗаказУниверсальный.ИД,
		|	ИНФ_ЗаказУниверсальный.ЗП_Строка_ИД,
		|	ИНФ_ЗаказУниверсальный.ЕдиницаИзмерения,
		|	ИНФ_ЗаказУниверсальный.Количество,
		|	ИНФ_ЗаказУниверсальный.Коэффициент,
		|	ИНФ_ЗаказУниверсальный.Номенклатура,
		|	ИНФ_ЗаказУниверсальный.СтавкаНДС,
		|	ИНФ_ЗаказУниверсальный.Цена,
		|	ИНФ_ЗаказУниверсальный.ИНФ_ЗакупочнаяЦена,
		|	ИНФ_ЗаказУниверсальный.ИНФ_Поставщик,
		|	ИНФ_ЗаказУниверсальный.ИНФ_ПроцентНаценкиМакс,
		|	ИНФ_ЗаказУниверсальный.ИНФ_ПроцентНаценки,
		|	ИНФ_ЗаказУниверсальный.APIПоставщик,
		|	ИНФ_ЗаказУниверсальный.APIНаименованиеПрайса,
		|	ИНФ_ЗаказУниверсальный.ApiБренд,
		|	ИНФ_ЗаказУниверсальный.ИНФ_Референс,
		|	ИНФ_ЗаказУниверсальный.ИдСтроки,
		|	ИНФ_ЗаказУниверсальный.ИдСтроки_2,
		|	ИНФ_ЗаказУниверсальный.ИДСтрокиПроценка,
		|	ИНФ_ЗаказУниверсальный.ИНФ_КоличествоКлиента,
		|	ИНФ_ЗаказУниверсальный.Валюта,
		|	ИНФ_ЗаказУниверсальный.ЦенаДоставки,
		|	ИНФ_ЗаказУниверсальный.ЦенаДоставки_2,
		|	ИНФ_ЗаказУниверсальный.ЦенаДоставки_3,
		|	ИНФ_ЗаказУниверсальный.Сумма,
		|	ИНФ_ЗаказУниверсальный.СуммаНДС,
		|	ИНФ_ЗаказУниверсальный.КоличествоНаСкладе,
		|	ИНФ_ЗаказУниверсальный.КоличествоОтказов
		|ИЗ
		|	РегистрСведений.ИНФ_ЗаказУниверсальный КАК ИНФ_ЗаказУниверсальный
		|ГДЕ
		|	(ИНФ_ЗаказУниверсальный.ЗП_Строка_ИД <> """"
		|			ИЛИ НЕ ИНФ_ЗаказУниверсальный.СтатусЗП = ЗНАЧЕНИЕ(Справочник.ИНФ_СтатусыЗаказовПоставщику.ПустаяСсылка))
		//|	И ИНФ_ЗаказУниверсальный.Количество > 0
		|	И ИНФ_ЗаказУниверсальный.ЗаказПокупателя = &ЗаказПокупателя
		|	И ИНФ_ЗаказУниверсальный.ИдСтроки_2 <> ""архив""";
		
		//|	ИНФ_ЗаказУниверсальный.ЗП_Строка_ИД <> """"
		//|	И (ИНФ_ЗаказУниверсальный.СтатусЗП = ЗНАЧЕНИЕ(Справочник.ИНФ_СтатусыЗаказовПоставщику.ПустаяСсылка)
		//|			ИЛИ НЕ ИНФ_ЗаказУниверсальный.СтатусЗП.ПроцениватьПовторно)
	
	Запрос.Параметры.Вставить("ЗаказПокупателя", ЗаказПокупателя);         
	
	РезультатЗапроса = Запрос.Выполнить();
	ТЗ = РезультатЗапроса.Выгрузить();
	                                     
	Возврат ТЗ; 
	
КонецФункции

Функция ПолучитьДанныеДляАрхива(ЗаказПокупателя)    //не используется
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ИНФ_ЗаказУниверсальный.ЗаказУниверсальный,
	//	|	ИНФ_ЗаказУниверсальный.ЗаказПокупателя,
	//	|	ИНФ_ЗаказУниверсальный.ИНФ_Статус,
	//	|	ИНФ_ЗаказУниверсальный.СтатусЗП,
	//	|	ИНФ_ЗаказУниверсальный.ИД,
	//	|	ИНФ_ЗаказУниверсальный.ЗП_Строка_ИД,
	//	|	ИНФ_ЗаказУниверсальный.ЕдиницаИзмерения,
	//	|	ИНФ_ЗаказУниверсальный.Количество,
	//	|	ИНФ_ЗаказУниверсальный.Коэффициент,
	//	|	ИНФ_ЗаказУниверсальный.Номенклатура,
	//	|	ИНФ_ЗаказУниверсальный.СтавкаНДС,
	//	|	ИНФ_ЗаказУниверсальный.Цена,
	//	|	ИНФ_ЗаказУниверсальный.ИНФ_ЗакупочнаяЦена,
	//	|	ИНФ_ЗаказУниверсальный.ИНФ_Поставщик,
	//	|	ИНФ_ЗаказУниверсальный.ИНФ_ПроцентНаценкиМакс,
	//	|	ИНФ_ЗаказУниверсальный.ИНФ_ПроцентНаценки,
	//	|	ИНФ_ЗаказУниверсальный.APIПоставщик,
	//	|	ИНФ_ЗаказУниверсальный.APIНаименованиеПрайса,
	//	|	ИНФ_ЗаказУниверсальный.ApiБренд,
	//	|	ИНФ_ЗаказУниверсальный.ИНФ_Референс,
	//	|	ИНФ_ЗаказУниверсальный.ИдСтроки,
	//	|	ИНФ_ЗаказУниверсальный.ИдСтроки_2,
	//	|	ИНФ_ЗаказУниверсальный.ИДСтрокиПроценка,
	//	|	ИНФ_ЗаказУниверсальный.ИНФ_КоличествоКлиента,
	//	|	ИНФ_ЗаказУниверсальный.Валюта,
	//	|	ИНФ_ЗаказУниверсальный.ЦенаДоставки,
	//	|	ИНФ_ЗаказУниверсальный.ЦенаДоставки_2,
	//	|	ИНФ_ЗаказУниверсальный.Сумма,
	//	|	ИНФ_ЗаказУниверсальный.СуммаНДС
	//	|ИЗ
	//	|	РегистрСведений.ИНФ_ЗаказУниверсальный КАК ИНФ_ЗаказУниверсальный
	//	|ГДЕ
	//	|	ИНФ_ЗаказУниверсальный.ЗП_Строка_ИД <> """"
	//	|	И ИНФ_ЗаказУниверсальный.СтатусЗП.ПроцениватьПовторно
	//	|	И ИНФ_ЗаказУниверсальный.ЗаказПокупателя = &ЗаказПокупателя
	//	|	И ИНФ_ЗаказУниверсальный.ИдСтроки_2 <> ""архив""";
	//
	//Запрос.Параметры.Вставить("ЗаказПокупателя", ЗаказПокупателя);         
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//ТЗ = РезультатЗапроса.Выгрузить();
	//                                     
	//Возврат ТЗ; 
	
КонецФункции

Функция ПолучитьКурсВалюты(Валюта, ДатаКурса)

	Если Валюта = Справочники.Валюты.НайтиПоКоду("643") Тогда    //руб
		
		ДатаКурса2 = ТекущаяДата();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КурсыВалютСрезПоследних.Период,
		|	КурсыВалютСрезПоследних.База,
		|	КурсыВалютСрезПоследних.КурсСНаценкой
		|ИЗ
		|	РегистрСведений.ИНФ_КурсUSD_к_Рублю.СрезПоследних(&ДатаДок, База = &База) КАК КурсыВалютСрезПоследних";
		
		Запрос.УстановитьПараметр("База",	Валюта);
		Запрос.УстановитьПараметр("ДатаДок", ДатаКурса2);
		
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		КурсРубUSD = 1;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			КурсРубUSD = ВыборкаДетальныеЗаписи.КурсСНаценкой;
		КонецЦикла;
		
		//КурсUSD = ПолучитьКурсВалюты(Справочники.Валюты.НайтиПоКоду("840"), ДатаКурса);
		
		//Возврат КурсUSD*КурсРубUSD;
		Возврат КурсРубUSD;
		
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КурсыВалютСрезПоследних.Период,
		|	КурсыВалютСрезПоследних.Валюта,
		|	КурсыВалютСрезПоследних.Курс,
		|	КурсыВалютСрезПоследних.Кратность
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДок, Валюта = &Валюта) КАК КурсыВалютСрезПоследних";
		
		Запрос.УстановитьПараметр("Валюта", Валюта);
		Запрос.УстановитьПараметр("ДатаДок", ДатаКурса);
		
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Курс = 1;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Курс = ВыборкаДетальныеЗаписи.Курс/ВыборкаДетальныеЗаписи.Кратность;
		КонецЦикла;
		
		Возврат Курс;
	КонецЕсли;

КонецФункции // ()

//Функция ПолучитьКурсРубля(ДатаКурса)

//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	КурсыВалютСрезПоследних.Период,
//	|	КурсыВалютСрезПоследних.База,
//	|	КурсыВалютСрезПоследних.КурсСНаценкой
//	|ИЗ
//	|	РегистрСведений.ИНФ_КурсUSD_к_Рублю.СрезПоследних(&ДатаДок, База = &База) КАК КурсыВалютСрезПоследних";
//	
//	Запрос.УстановитьПараметр("База",	Справочники.Валюты.НайтиПоКоду("643"));
//	Запрос.УстановитьПараметр("ДатаДок", ДатаКурса);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
//	КурсРубUSD = 1;
//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
//		КурсРубUSD = ВыборкаДетальныеЗаписи.Курс;
//	КонецЦикла;
//	
//	КурсUSD = ПолучитьКурсВалюты(Справочники.Валюты.НайтиПоКоду("840"), ДатаКурса);
//	
//	Возврат КурсРубUSD/КурсUSD;

//КонецФункции
 
//Процедура КоманднаяПанель3СортироватьКолонку(Кнопка)
//	
//	Если НЕ ТЗ_РазобраноПоПоставщикам.Количество() = 0 Тогда
//		Колонка = (ЭлементыФормы.ТЗ_РазобраноПоПоставщикам.ТекущаяКолонка.Имя);
//		ТЗ_РазобраноПоПоставщикам.Сортировать(Колонка + " " + Кнопка.Имя);
//	КонецЕсли;
//	
//КонецПроцедуры

Процедура КоманднаяПанель3УстановитьОтбор(Кнопка)
	
	Если ТЗ_РазобраноПоПоставщикам_Исходная.Количество() = 0 Тогда //Установить отбор
		ТЗ_РазобраноПоПоставщикам_Исходная = ТЗ_РазобраноПоПоставщикам.Скопировать();
		
		Отбор = Новый Структура();
		Отбор.Вставить(ЭлементыФормы.ТЗ_РазобраноПоПоставщикам.ТекущаяКолонка.Имя, ЭлементыФормы.ТЗ_РазобраноПоПоставщикам.ТекущаяСтрока[ЭлементыФормы.ТЗ_РазобраноПоПоставщикам.ТекущаяКолонка.Имя]);
		ТЗ_РазобраноПоПоставщикам = ТЗ_РазобраноПоПоставщикам.Скопировать(Отбор);
		ЭлементыФормы.КоманднаяПанель3.Кнопки.УстановитьОтбор.Картинка = БиблиотекаКартинок.ОтключитьОтбор;
	Иначе
		ТЗ_РазобраноПоПоставщикам = ТЗ_РазобраноПоПоставщикам_Исходная.Скопировать();
		ТЗ_РазобраноПоПоставщикам_Исходная.Очистить();
		ЭлементыФормы.КоманднаяПанель3.Кнопки.УстановитьОтбор.Картинка = БиблиотекаКартинок.ОтборПоТекущемуЗначению;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ВосстановитьТЗ_РазобраноПоПоставщикам()

	Если НЕ ТЗ_РазобраноПоПоставщикам_Исходная.Количество() = 0 Тогда 
		ТЗ_РазобраноПоПоставщикам = ТЗ_РазобраноПоПоставщикам_Исходная.Скопировать();
		ТЗ_РазобраноПоПоставщикам_Исходная.Очистить();
		ЭлементыФормы.КоманднаяПанель3.Кнопки.УстановитьОтбор.Картинка = БиблиотекаКартинок.ОтборПоТекущемуЗначению;
	КонецЕсли;	

КонецПроцедуры

Процедура Панель2ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = 2 Тогда
		ВосстановитьТЗ_РазобраноПоПоставщикам()
	КонецЕсли; 
		
КонецПроцедуры

Процедура УправлениеДоступностьюКолонок(ИмяТЗ, КолонкаТолькоПросмотр = Истина)
	
	Для Каждого СтрКолонка Из ТЗ_РазобраноПоПоставщикам.Колонки Цикл
		ЭлементыФормы[ИмяТЗ].Колонки[СтрКолонка.Имя].ТолькоПросмотр = КолонкаТолькоПросмотр;	
	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанель3СохранитьВЭксель(Кнопка)
	
	Диалог = новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Фильтр = "Документ Excel, *.xlsx|*.xlsx";
	Если Диалог.Выбрать() Тогда
		
		ТЗ = ТЗ_РазобраноПоПоставщикам.Скопировать(,"ИмяТЧ, ЗаказПокупателя, Name_en, Name_ru, Бренд, Номер, ИНФ_КоличествоКлиента, Количество, ИНФ_ЗакупочнаяЦена, Валюта, НашаЦена, ЦенаДоставки, ЗакупочнаяЦенаВВалютеЗК");
		
		КвалификаторыЧисла = Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Любой);
		КвалификаторыЧислаЦена = Новый КвалификаторыЧисла(15, 4, ДопустимыйЗнак.Любой);
		КвалификаторыЧисла_Сот = Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой);

		НаценкаСверху 		= ?(ТабЗаказы[0].ЗаказПокупателя.НаценкаСверху <> 0, ТабЗаказы[0].ЗаказПокупателя.НаценкаСверху, 1);
		Маржа				= ?(ТабЗаказы[0].ЗаказПокупателя.Маржа <> 0, ТабЗаказы[0].ЗаказПокупателя.Маржа, 1);
		
		ТЗ_Excel = Новый ТаблицаЗначений;
		ТЗ_Excel.Колонки.Добавить("Name_en");
		ТЗ_Excel.Колонки.Добавить("Name_ru");
		ТЗ_Excel.Колонки.Добавить("Brand");
		ТЗ_Excel.Колонки.Добавить("PartNumber");
		ТЗ_Excel.Колонки.Добавить("Status");
		ТЗ_Excel.Колонки.Добавить("Quantity", Новый ОписаниеТипов("Число",КвалификаторыЧисла));
		ТЗ_Excel.Колонки.Добавить("Quantity2", Новый ОписаниеТипов("Число",КвалификаторыЧисла));
		ТЗ_Excel.Колонки.Добавить("Cost", Новый ОписаниеТипов("Число",КвалификаторыЧисла_Сот));
		ТЗ_Excel.Колонки.Добавить("Currency");
		//ТЗ_Excel.Колонки.Добавить("Delivery", Новый ОписаниеТипов("Число",КвалификаторыЧислаЦена));
		ТЗ_Excel.Колонки.Добавить("Price", Новый ОписаниеТипов("Число",КвалификаторыЧисла_Сот));
		ТЗ_Excel.Колонки.Добавить("Total", Новый ОписаниеТипов("Число",КвалификаторыЧисла_Сот));

		Для каждого СтрТЗ Из ТЗ Цикл
			
			Если СтрТЗ.Количество = 0 Тогда 
				Продолжить 
			КонецЕсли;
			
			НоваяСтрока = ТЗ_Excel.Добавить();
			
			НоваяСтрока.Name_en				= СтрТЗ.Name_en;
			НоваяСтрока.Name_ru				= СтрТЗ.Name_ru;
			НоваяСтрока.Brand				= СтрТЗ.Бренд;
			НоваяСтрока.PartNumber			= СтрТЗ.Номер;
			//НоваяСтрока.Status				= ?(СтрТЗ.Количество = 0, "нет в наличии", "в наличии");
			НоваяСтрока.Status				= "в наличии";
			НоваяСтрока.Quantity		 	= СтрТЗ.ИНФ_КоличествоКлиента;
			НоваяСтрока.Quantity2			= СтрТЗ.Количество;
			НоваяСтрока.Cost				= СтрТЗ.ИНФ_ЗакупочнаяЦена;
			НоваяСтрока.Currency			= СтрТЗ.Валюта;
			//НоваяСтрока.Delivery			= СтрТЗ.ЦенаДоставки;
			НоваяСтрока.Price				= Окр(СтрТЗ.НашаЦена * НаценкаСверху + 0.005, 2, 0);      
			
			//= ( "Цена поставщика [валюта ЗК]" * "Мин.наценка" + "Цена доставки [валюта ЗК]" ) * "Наценка сверху"
			//НоваяСтрока.Price				= Окр((СтрТЗ.ЗакупочнаяЦенаВВалютеЗК * (1+Маржа/100) + СтрТЗ.ЦенаДоставки) * НаценкаСверху + 0.005, 2, 0);      
			НоваяСтрока.Total				= Окр(НоваяСтрока.Price * СтрТЗ.Количество + 0.005, 2, 0);
			
			Если СтрТЗ.ИНФ_КоличествоКлиента > СтрТЗ.Количество И СтрТЗ.Количество <> 0 Тогда
				
				НоваяСтрока.Quantity = СтрТЗ.Количество;
				
				НоваяСтрокаДоб = ТЗ_Excel.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаДоб, НоваяСтрока);
				
				НоваяСтрокаДоб.Status		= "нет в наличии";
				НоваяСтрокаДоб.Quantity		= СтрТЗ.ИНФ_КоличествоКлиента - СтрТЗ.Количество;
				НоваяСтрокаДоб.Quantity2 	= 0;
				НоваяСтрокаДоб.Cost			= 0;
				//НоваяСтрокаДоб.Delivery		= 0;
				НоваяСтрокаДоб.Price		= 0;
				НоваяСтрокаДоб.Total		= 0;
			
			КонецЕсли; 
		КонецЦикла; 
		
		ТЗ_Excel_2 = ТЗ_Excel.Скопировать(,"Name_en, Name_ru, Brand, PartNumber, Status, Quantity, Currency, Cost, Price, Total");
		
		ИмяФайла = Диалог.ПолноеИмяФайла;
		
		ТабДок = Новый ТабличныйДокумент;
		
		Построитель = Новый ПостроительОтчета();
		
		Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТЗ_Excel_2);
		Построитель.ВыводитьЗаголовокОтчета = Ложь;
		Построитель.Вывести(ТабДок);
		
		//ТабДок.Показать();
		
		ТабДок.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.XLSX);
		ЗапуститьПриложение(ИмяФайла);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанель3СохранитьВЭксельДляКлиента(Кнопка)
	
	Диалог = новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Фильтр = "Документ Excel, *.xlsx|*.xlsx";
	Если Диалог.Выбрать() Тогда
		
		ТЗ = ТЗ_РазобраноПоПоставщикам.Скопировать(,"ИмяТЧ, ЗаказПокупателя, Name_en, Name_ru, Бренд, Номер, ИНФ_КоличествоКлиента, Количество, ИНФ_ЗакупочнаяЦена, Валюта, НашаЦена, ЦенаДоставки, ЗакупочнаяЦенаВВалютеЗК");
		
		КвалификаторыЧисла = Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Любой);
		КвалификаторыЧислаЦена = Новый КвалификаторыЧисла(15, 4, ДопустимыйЗнак.Любой);
		КвалификаторыЧисла_Сот = Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой);

		НаценкаСверху 		= ?(ТабЗаказы[0].ЗаказПокупателя.НаценкаСверху <> 0, ТабЗаказы[0].ЗаказПокупателя.НаценкаСверху, 1);
		Маржа				= ?(ТабЗаказы[0].ЗаказПокупателя.Маржа <> 0, ТабЗаказы[0].ЗаказПокупателя.Маржа, 1);
		
		ТЗ_Excel = Новый ТаблицаЗначений;
		ТЗ_Excel.Колонки.Добавить("Name_en");
		ТЗ_Excel.Колонки.Добавить("Name_ru");
		ТЗ_Excel.Колонки.Добавить("Brand");
		ТЗ_Excel.Колонки.Добавить("PartNumber");
		ТЗ_Excel.Колонки.Добавить("Status");
		ТЗ_Excel.Колонки.Добавить("Quantity", Новый ОписаниеТипов("Число",КвалификаторыЧисла));
		ТЗ_Excel.Колонки.Добавить("Quantity2", Новый ОписаниеТипов("Число",КвалификаторыЧисла));
		//ТЗ_Excel.Колонки.Добавить("Cost", Новый ОписаниеТипов("Число",КвалификаторыЧисла_Сот));
		ТЗ_Excel.Колонки.Добавить("Currency");
		//ТЗ_Excel.Колонки.Добавить("Delivery", Новый ОписаниеТипов("Число",КвалификаторыЧислаЦена));
		ТЗ_Excel.Колонки.Добавить("Price", Новый ОписаниеТипов("Число",КвалификаторыЧисла_Сот));
		ТЗ_Excel.Колонки.Добавить("Total", Новый ОписаниеТипов("Число",КвалификаторыЧисла_Сот));

		Для каждого СтрТЗ Из ТЗ Цикл
			
			Если СтрТЗ.Количество = 0 ИЛИ СтрТЗ.ИмяТЧ = "Отказ наш" Тогда 
				Продолжить 
			КонецЕсли;
			
			НоваяСтрока = ТЗ_Excel.Добавить();
			
			НоваяСтрока.Name_en				= СтрТЗ.Name_en;
			НоваяСтрока.Name_ru				= СтрТЗ.Name_ru;
			НоваяСтрока.Brand				= СтрТЗ.Бренд;
			НоваяСтрока.PartNumber			= СтрТЗ.Номер;
			//НоваяСтрока.Status			= ?(СтрТЗ.Количество = 0, "нет в наличии", "в наличии");
			//НоваяСтрока.Status				= ?(СтрТЗ.ИмяТЧ = "Отказ наш", "нет в наличии", "в наличии");
			НоваяСтрока.Status				= "в наличии";
			НоваяСтрока.Quantity		 	= СтрТЗ.ИНФ_КоличествоКлиента;
			НоваяСтрока.Quantity2			= СтрТЗ.Количество;
			//НоваяСтрока.Cost				= СтрТЗ.ИНФ_ЗакупочнаяЦена;
			//НоваяСтрока.Currency			= СтрТЗ.Валюта;
			НоваяСтрока.Currency			= СтрТЗ.ЗаказПокупателя.ВалютаДокумента;
			//НоваяСтрока.Delivery			= СтрТЗ.ЦенаДоставки;
			//НоваяСтрока.Price				= Окр(СтрТЗ.НашаЦена * НаценкаСверху + 0.005, 2, 0);      
			НоваяСтрока.Price				= Окр((СтрТЗ.ЗакупочнаяЦенаВВалютеЗК + СтрТЗ.ЦенаДоставки) * НаценкаСверху + 0.005, 2, 0);      
			
			//= ( "Цена поставщика [валюта ЗК]" * "Мин.наценка" + "Цена доставки [валюта ЗК]" ) * "Наценка сверху"
			//НоваяСтрока.Price				= Окр((СтрТЗ.ЗакупочнаяЦенаВВалютеЗК * (1+Маржа/100) + СтрТЗ.ЦенаДоставки) * НаценкаСверху + 0.005, 2, 0);      
			НоваяСтрока.Total				= Окр(НоваяСтрока.Price * СтрТЗ.Количество + 0.005, 2, 0);
			
			Если СтрТЗ.ИНФ_КоличествоКлиента > СтрТЗ.Количество И СтрТЗ.Количество <> 0 Тогда
				
				НоваяСтрока.Quantity = СтрТЗ.Количество;
				
				НоваяСтрокаДоб = ТЗ_Excel.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаДоб, НоваяСтрока);
				
				НоваяСтрокаДоб.Status		= "нет в наличии";
				НоваяСтрокаДоб.Quantity		= СтрТЗ.ИНФ_КоличествоКлиента - СтрТЗ.Количество;
				НоваяСтрокаДоб.Quantity2 	= 0;
				//НоваяСтрокаДоб.Cost			= 0;
				//НоваяСтрокаДоб.Delivery		= 0;
				НоваяСтрокаДоб.Price		= 0;
				НоваяСтрокаДоб.Total		= 0;
			
			КонецЕсли; 
		КонецЦикла; 
		
		//ТЗ_Excel_2 = ТЗ_Excel.Скопировать(,"Name_en, Name_ru, Brand, PartNumber, Status, Quantity, Currency, Cost, Price, Total");
		ТЗ_Excel_2 = ТЗ_Excel.Скопировать(,"Brand, PartNumber, Status, Quantity, Currency, Price, Total, Name_en, Name_ru");
		
		ИмяФайла = Диалог.ПолноеИмяФайла;
		
		ТабДок = Новый ТабличныйДокумент;
		
		Построитель = Новый ПостроительОтчета();
		
		Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТЗ_Excel_2);
		Построитель.ВыводитьЗаголовокОтчета = Ложь;
		Построитель.Вывести(ТабДок);
		
		//ТабДок.Показать();
		
		ТабДок.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.XLSX);
		ЗапуститьПриложение(ИмяФайла);
		
	КонецЕсли;
	
КонецПроцедуры


//ТЗ_СозданныеПроценкиПоПоставщикам.Колонки.Добавить("ЗаказПокупателя");
ТЗ_СозданныеПроценкиПоПоставщикам.Колонки.Добавить("Поставщик");
ТЗ_СозданныеПроценкиПоПоставщикам.Колонки.Добавить("IDПроценки");
ТЗ_СозданныеПроценкиПоПоставщикам.Колонки.Добавить("ПроценкаСсылка");
ТЗ_СозданныеПроценкиПоПоставщикам.Колонки.Добавить("Статус");
ТЗ_СозданныеПроценкиПоПоставщикам.Колонки.Добавить("Отработана");
ТЗ_СозданныеПроценкиПоПоставщикам.Колонки.Добавить("ОтработанаCОшибками");
ТЗ_СозданныеПроценкиПоПоставщикам.Колонки.Добавить("Загружено",Новый ОписаниеТипов("Булево"));
ТЗ_СозданныеПроценкиПоПоставщикам.Колонки.Добавить("ДатаСоздания");
ТЗ_СозданныеПроценкиПоПоставщикам.Колонки.Добавить("ДатаОбновления");

КвалификаторыЧисла = Новый КвалификаторыЧисла(10, 2, ДопустимыйЗнак.Любой);
КвалификаторыЧисла_Цел = Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Любой);
КвалификаторыЧисла_Тыс = Новый КвалификаторыЧисла(10, 3, ДопустимыйЗнак.Любой);
КвалификаторыЧислаЦена = Новый КвалификаторыЧисла(15, 4, ДопустимыйЗнак.Любой);

ТЗ_РазобраноПоПоставщикам.Колонки.Добавить("ЗаказПокупателя");
ТЗ_РазобраноПоПоставщикам.Колонки.Добавить("APIПоставщик");
ТЗ_РазобраноПоПоставщикам.Колонки.Добавить("Прайс");
ТЗ_РазобраноПоПоставщикам.Колонки.Добавить("name_en");
ТЗ_РазобраноПоПоставщикам.Колонки.Добавить("name_ru");
ТЗ_РазобраноПоПоставщикам.Колонки.Добавить("Бренд");
ТЗ_РазобраноПоПоставщикам.Колонки.Добавить("Номер");
ТЗ_РазобраноПоПоставщикам.Колонки.Добавить("Номенклатура");
ТЗ_РазобраноПоПоставщикам.Колонки.Добавить("ИНФ_КоличествоКлиента", Новый ОписаниеТипов("Число",КвалификаторыЧисла_Цел),"Количество клиента");
ТЗ_РазобраноПоПоставщикам.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",КвалификаторыЧисла_Цел));

ТЗ_РазобраноПоПоставщикам.Колонки.Добавить("Вес", Новый ОписаниеТипов("Число",КвалификаторыЧисла_Тыс),"Вес");
ТЗ_РазобраноПоПоставщикам.Колонки.Добавить("Объем", Новый ОписаниеТипов("Число",КвалификаторыЧисла_Тыс),"Объем");

ТЗ_РазобраноПоПоставщикам.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число",КвалификаторыЧисла),"Цена ЗК");
ТЗ_РазобраноПоПоставщикам.Колонки.Добавить("ИНФ_ЗакупочнаяЦена", Новый ОписаниеТипов("Число",КвалификаторыЧисла),"Цена поставщика");
ТЗ_РазобраноПоПоставщикам.Колонки.Добавить("ЗакупочнаяЦенаВВалютеЗК", Новый ОписаниеТипов("Число",КвалификаторыЧисла),"Цена поставщика (вал.ЗК)");
ТЗ_РазобраноПоПоставщикам.Колонки.Добавить("ЦенаДоставки", Новый ОписаниеТипов("Число",КвалификаторыЧисла),"Цена доставки");
ТЗ_РазобраноПоПоставщикам.Колонки.Добавить("НашаЦена", Новый ОписаниеТипов("Число",КвалификаторыЧислаЦена),"Цена итог");

ТЗ_РазобраноПоПоставщикам.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));

ТЗ_РазобраноПоПоставщикам.Колонки.Добавить("Цена_2", Новый ОписаниеТипов("Число",КвалификаторыЧислаЦена),"Р. Цена ЗК");
ТЗ_РазобраноПоПоставщикам.Колонки.Добавить("ИНФ_ЗакупочнаяЦена_2", Новый ОписаниеТипов("Число",КвалификаторыЧислаЦена),"Р. Цена поставщика");
ТЗ_РазобраноПоПоставщикам.Колонки.Добавить("ЦенаДоставки_2", Новый ОписаниеТипов("Число",КвалификаторыЧислаЦена),"Р. Цена доставки");
ТЗ_РазобраноПоПоставщикам.Колонки.Добавить("НашаЦена_2", Новый ОписаниеТипов("Число",КвалификаторыЧислаЦена),"Р. Цена итог");

ТЗ_РазобраноПоПоставщикам.Колонки.Добавить("ИНФ_ПроцентНаценки", Новый ОписаниеТипов("Число",КвалификаторыЧислаЦена),"% наценки");
ТЗ_РазобраноПоПоставщикам.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число",КвалификаторыЧислаЦена), "Р. Сумма");

ТЗ_РазобраноПоПоставщикам.Колонки.Добавить("ИмяТЧ",, "Статус");
ТЗ_РазобраноПоПоставщикам.Колонки.Добавить("ИНФ_Поставщик");
ТЗ_РазобраноПоПоставщикам.Колонки.Добавить("ИДСтроки");
ТЗ_РазобраноПоПоставщикам.Колонки.Добавить("ИДСтрокиПроценка");
ТЗ_РазобраноПоПоставщикам.Колонки.Добавить("ApiБренд");
ТЗ_РазобраноПоПоставщикам.Колонки.Добавить("APIНаименованиеПрайса");